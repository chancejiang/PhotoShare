{"_id":"_design/photoshare","vendor":{"phonegap":{},"zepto":{}},"filters":{"thumbnail":"function(doc, req) {\n  if(doc.type == \"thumbnail\") {\n    return true;\n  } else {\n    return false;\n  }\n}"},"language":"javascript","views":{"photo_and_comments":{"map":"function(doc) {\n  if(doc.type == 'photo')\n    emit([doc._id, 0], doc);\n  else if(doc.type == 'comment')\n    emit([doc.photo, 1], doc);\n};"},"thumbnails":{"map":"function(doc) {\n  if(doc.type == \"thumbnail\") {\n    emit(doc._id, doc);\n  }\n}"},"photos":{"map":"function(doc) {\n  if(doc.type == \"photo\" || doc._attachments && doc._attachments['original.jpg'])\n    emit(doc._id, doc);\n}"}},"README":"## Generated CouchApp\n\nThis is meant to be an example CouchApp and to ship with most of the CouchApp goodies.\n\nClone with git:\n\n    git clone git://github.com/couchapp/example.git\n    cd example\n\nInstall with \n    \n    couchapp push . http://localhost:5984/example\n\nor (if you have security turned on)\n\n    couchapp push . http://adminname:adminpass@localhost:5984/example\n  \nYou can also create this app by running\n\n    couchapp generate example && cd example\n    couchapp push . http://localhost:5984/example\n\nDeprecated: *couchapp generate proto && cd proto*\n\n\n## Todo\n\n* factor CouchApp Commonjs to jquery.couch.require.js\n* use $.couch.app in app.js\n\n## License\n\nApache 2.0","couchapp":{"manifest":["couchapp.json","filters/","filters/thumbnail.js","language","README.md","vendor/","vendor/phonegap/","vendor/zepto/","views/","views/photo_and_comments/","views/photo_and_comments/map.js","views/photos/","views/photos/map.js","views/thumbnails/","views/thumbnails/map.js"],"signatures":{"style/photoshare.css":"d8656de8e07ad551a6f351732a45e758","index.html":"ed4cc04736daac48839ea2a865809932","script/capture.js":"0c1b2a6ec76667963a6484f86dae30c0","script/.capture.js.swp":"31beb2588a6f8e3927ae04ebbd65da07","vendor/zepto/zepto.min.js":"13a2dd4addf1cd5036d48780868e25d7","vendor/phonegap/phonegap-1.0.0.js":"538bf1c6197e199483f6bf4d9c9868bb","vendor/zepto/zepto.js":"a321f0a42b6237205a89b1f4254e6207","script/couchdbplugin.js":"664ead06ac914a7ac80430ecd40a001f"},"description":"Photo sharing application","objects":{},"name":"PhotoShare"},"_attachments":{"style/photoshare.css":{"content_type":"text/css","revpos":6,"data":"I3N5bmNwb2ludCB7CiAgcGFkZGluZzogMWVtOwp9CmJ1dHRvbiB7CiAgaGVpZ2h0OiA0MnB4OwogIHBhZGRpbmc6IDAgOHB4OwogIGNvbG9yOiAjMTUxYjI0OwogIGxpbmUtaGVpZ2h0OiA0MnB4OwogIHRleHQtc2hhZG93OiAjZmZmIDBweCAxcHggMXB4OwogIC13ZWJraXQtYm9yZGVyLXJhZGl1czogMTZweDsKICBib3JkZXI6IDFweCBzb2xpZCAjMzEzNjNkOwogIGJhY2tncm91bmQ6IC13ZWJraXQtZ3JhZGllbnQobGluZWFyLCBsZWZ0IHRvcCwgbGVmdCBib3R0b20sIGZyb20oI2NiY2ZkNCksIHRvKCM5MzliYTYpKTsKICAtd2Via2l0LWJhY2tncm91bmQtY2xpcDogcGFkZGluZy1ib3g7Cn0KI3Bob3RvdmlldyB7CiAgLXdlYmtpdC10cmFuc2l0aW9uLWR1cmF0aW9uOiAxczsKICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDEwMCUsIDApOwogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICBtYXJnaW4tbGVmdDogYXV0bzsKICBtYXJnaW4tcmlnaHQ6IGF1dG87CiAgdG9wOjA7bGVmdDowO3JpZ2h0OjA7Ym90dG9tOjA7YmFja2dyb3VuZDpyZ2JhKDI1NSwyNTUsMjU1LDEpOwp9CgoudGh1bWJuYWlsIHsKICB3aWR0aDogIjYwcHgiOwogIGZsb2F0OiAibGVmdCI7CiAgcGFkZGluZzogIjJweCI7Cn0KCiNjb21tZW50LWZvcm0gewogIGNvbG9yOiBibGFjazsKfQojY29tbWVudC1mb3JtICogewogIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7Cn0KCiNjb21tZW50LWF1dGhvciB7CiAgd2lkdGg6IDUwcHg7Cn0KCi5hdXRob3IgewogIGZvbnQtd2VpZ2h0OiBib2xkOwp9Cg=="},"index.html":{"content_type":"text/html","revpos":6,"data":"PCFET0NUWVBFIEhUTUw+CjxodG1sPgogIDxoZWFkPgogICAgPHRpdGxlPlBob25lR2FwPC90aXRsZT4KICAgIDxsaW5rIGhyZWY9InN0eWxlL3Bob3Rvc2hhcmUuY3NzIiB0eXBlPSJ0ZXh0L2NzcyIgcmVsPSJzdHlsZXNoZWV0IiAvPgogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9InVzZXItc2NhbGFibGU9bm8sIHdpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLCBtYXhpbXVtLXNjYWxlPTEiIC8+CiAgPC9oZWFkPgogIDxib2R5IHN0eWxlPSJ0ZXh0LWFsaWduOmNlbnRlcjsiPgogICAgPCEtLSBtYWluIC0tPgogICAgPGRpdiBpZD0ibWFpbiI+CiAgICAgIDxoMT5XZWxjb21lIHRvIFBob3RvU2hhcmU8L2gxPgogICAgICA8aDI+PHN0cm9uZz5kZW1vOjwvc3Ryb25nPiBBbGwgUGhvdG9zIGFyZSBQdWJsaWM8L2gyPgogICAgICA8ZGl2IGlkPSJzeW5jcG9pbnQiPjwvZGl2PgogICAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgY2hhcnNldD0idXRmLTgiIHNyYz0idmVuZG9yL3Bob25lZ2FwL3Bob25lZ2FwLTEuMC4wLmpzIj48L3NjcmlwdD4KICAgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIGNoYXJzZXQ9InV0Zi04IiBzcmM9InZlbmRvci96ZXB0by96ZXB0by5taW4uanMiPjwvc2NyaXB0PgogICAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgY2hhcnNldD0idXRmLTgiIHNyYz0ic2NyaXB0L2NvdWNoZGJwbHVnaW4uanMiPjwvc2NyaXB0PgogICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgaWQ9ImNhcHR1cmVQaG90byIKICAgICAgICAgICAgICBvbmNsaWNrPSJjYXB0dXJlUGhvdG8oKTsiIGRpc2FibGVkPSJkaXNhYmxlZCI+CiAgICAgICAgVGFrZSBhIHBpY3R1cmUhCiAgICAgIDwvYnV0dG9uPgogICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgaWQ9InJlbG9hZFBhZ2UiCiAgICAgICAgICAgICAgb25jbGljaz0id2luZG93LmxvY2F0aW9uLnJlbG9hZCgpOyI+CiAgICAgICAgUmVsb2FkIFBhZ2UKICAgICAgPC9idXR0b24+CiAgICAgIDxociAvPgogICAgICA8ZGl2IGlkPSJtZXNzYWdlIj48L2Rpdj4KICAgICAgPGgzPlBpY3R1cmVzIGluIENvdWNoYmFzZTwvaDM+CiAgICAgIDxkaXYgaWQ9InBpY3R1cmVzIj48L2Rpdj4KICAgIDwvZGl2PgogICAgPCEtLSBlbmQgbWFpbiAtLT4KICAgIDxkaXYgaWQ9InBob3RvdmlldyIgc3R5bGU9ImRpc3BsYXk6bm9uZSI+CiAgICAgIDxpbWcgaWQ9InBob3Rvdmlldy1pbWFnZSIgc3JjPSJodHRwOi8vd3d3LnBob25lZ2FwLmNvbS9hc3NldHMvY2Fyb3VzZWwvZHc1XzQuanBnIiBhbHQ9IiIgLz4KICAgICAgPGRpdiBpZD0iY29tbWVudHMiPgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBpZD0iY29tbWVudC1mb3JtIj4KICAgICAgICA8bGFiZWwgZm9yPSJjb21tZW50LWF1dGhvciI+QXV0aG9yPC9sYWJlbD4KICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgaWQ9ImNvbW1lbnQtYXV0aG9yIiB2YWx1ZT0iQXV0aG9yIiAvPgogICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0iY29tbWVudC10ZXh0IiB2YWx1ZT0iUHV0IHlvdXIgY29tbWVudCBoZXJlLi4uIiAvPgogICAgICAgIDxidXR0b24gaWQ9InNlbmQtY29tbWVudCI+U2VuZCBjb21tZW50ITwvYnV0dG9uPgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIGNoYXJzZXQ9InV0Zi04IiBzcmM9InNjcmlwdC9jYXB0dXJlLmpzIj48L3NjcmlwdD4KICA8L2JvZHk+CjwvaHRtbD4K"},"script/capture.js":{"content_type":"application/javascript","revpos":7,"data":"Ly8gVXNlIFBob25lR2FwIHBvbGxpbmcgYmVjYXVzZSBvZiBjcm9zcy1vcmlnaW4mc3BlZWQgcHJvYmxlbSB3aGVuIGxvYWRpbmcgZnJvbSBjb3VjaERCClBob25lR2FwLlVzZVBvbGxpbmcgPSB0cnVlOwoKdmFyIHNlbGVjdGVkUGljdHVyZUlkID0gbnVsbDsKCi8vIEhlbHBlciBNZXRob2RzCgpmdW5jdGlvbiBhZGRJbWFnZShpbWFnZUlkKSB7CiAgICB2YXIgbmV3SW1nID0gJCgiPGltZz48L2ltZz4iKQogICAgICAgICAgICAgICAgIC5hZGRDbGFzcygndGh1bWJuYWlsJykKICAgICAgICAgICAgICAgICAuY3NzKCdmbG9hdCcsICdsZWZ0JykKICAgICAgICAgICAgICAgICAuY3NzKCdwYWRkaW5nJywgJzJweCcpCiAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgJCh0aGlzKS5oaWRlKCk7CiAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAuYXR0cih7aWQ6IGltYWdlSWQsCiAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogJy9waG90b3NoYXJlLycraW1hZ2VJZCsnL3RodW1ibmFpbC5qcGcnCiAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICBuZXdJbWcuY2xpY2sob25JbWFnZUNsaWNrKTsKICAgICQoJyNwaWN0dXJlcycpLnByZXBlbmQobmV3SW1nKTsKfQoKZnVuY3Rpb24gYWRkQ29tbWVudChjb21tZW50RG9jKSB7CiAgJCgnI2NvbW1lbnRzJykucHJlcGVuZCgnPHNwYW4+Jytjb21tZW50RG9jLmNvbW1lbnQrJzwvc3Bhbj48YnIvPicpCiAgICAgICAgICAgICAgICAucHJlcGVuZCgnPHNwYW4gY2xhc3M9ImF1dGhvciI+Jytjb21tZW50RG9jLmF1dGhvcisnIHdyb3RlOjwvc3Bhbj4gJyk7Cn0KCmZ1bmN0aW9uIGNsZWFyUGhvdG9WaWV3KCkgewogICQoJyNjb21tZW50cycpLmh0bWwoJycpOwogICQoJyNwaG90b3ZpZXctaW1hZ2UnKS5hdHRyKCdzcmMnLCAnJyk7Cn0KCmZ1bmN0aW9uIHRvZ2dsZUJ1dHRvbigpIHsKICB2YXIgY2FwdHVyZSA9ICQoJyNjYXB0dXJlUGhvdG8nKTsKICBpZihjYXB0dXJlLmF0dHIoJ2Rpc2FibGVkJykpIHsKICAgIGNhcHR1cmUucmVtb3ZlQXR0cignZGlzYWJsZWQnKTsKICB9IGVsc2UgewogICAgY2FwdHVyZS5hdHRyKCdkaXNhYmxlZCcsIHRydWUpOwogIH0KfQoKZnVuY3Rpb24gc2V0TWVzc2FnZShtZXNzYWdlKSB7CiAgJCgnI21lc3NhZ2UnKS5odG1sKG1lc3NhZ2UpOwp9CgovLyBTeW5jcG9pbnQKCmZ1bmN0aW9uIHNldHVwU3luYygpIHsKICAgIHZhciBzeW5jcG9pbnQgPSAiaHR0cDovL2NvdWNoYmFzZS5pYy5odC9waG90b3NoYXJlIjsKICAgICQuYWpheCh7CiAgICAgIHR5cGU6ICdQT1NUJywKICAgICAgdXJsOiAnL19yZXBsaWNhdGUnLAogICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeSh7CiAgICAgICAgICBzb3VyY2UgOiBzeW5jcG9pbnQsCiAgICAgICAgICB0YXJnZXQgOiAicGhvdG9zaGFyZSIKICAgICAgfSksCiAgICAgIGRhdGFUeXBlOiAnanNvbicsCiAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbicKICAgIH0pOwogICAgJC5hamF4KHsKICAgICAgdHlwZTogJ1BPU1QnLAogICAgICB1cmw6ICcvX3JlcGxpY2F0ZScsCiAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHsKICAgICAgICAgIHRhcmdldCA6IHN5bmNwb2ludCwKICAgICAgICAgIHNvdXJjZSA6ICJwaG90b3NoYXJlIgogICAgICB9KSwKICAgICAgZGF0YVR5cGU6ICdqc29uJywKICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJwogICAgfSk7Cn0KCi8vIENhcHR1cmUKCmZ1bmN0aW9uIG9uQ2FwdHVyZVN1Y2Nlc3MoaW1hZ2VEYXRhKSB7CiAgY29uc29sZS5sb2coIm9uQ2FwdHVyZVN1Y2Nlc3MiKTsKICB2YXIgb25TYXZlU3VjY2VzcyA9IGZ1bmN0aW9uKGltYWdlRG9jKSB7CiAgICBhZGRJbWFnZShpbWFnZURvYy5pZCk7CiAgICBzZXRNZXNzYWdlKCcnKTsKICB9OwogIHZhciBvblNhdmVGYWlsdXJlID0gZnVuY3Rpb24oeGhyLCB0eXBlKSB7CiAgICBhbGVydCgib25TYXZlRmFpbHVyZSAiK3R5cGUgKyAnICcgKyB4aHIucmVzcG9uc2VUZXh0KTsKICB9OwogIHNldE1lc3NhZ2UoJ1NhdmluZyBpbWFnZS4uLicpOwogIHZhciBpbWFnZURvYyA9IHsKICAgIHR5cGU6ICJwaG90byIsCiAgICBjcmVhdGVkX2F0OiBuZXcgRGF0ZSgpLAogICAgX2F0dGFjaG1lbnRzOiB7CiAgICAgICJvcmlnaW5hbC5qcGciOiB7CiAgICAgICAgY29udGVudF90eXBlOiAiaW1hZ2UvanBlZyIsCiAgICAgICAgZGF0YTogaW1hZ2VEYXRhCiAgICAgIH0KICB9fTsKICAkLmFqYXgoewogICAgdHlwZTogJ1BPU1QnLAogICAgdXJsOiAnL3Bob3Rvc2hhcmUnLAogICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoaW1hZ2VEb2MpLAogICAgZGF0YVR5cGU6ICdqc29uJywKICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbicsCiAgICBzdWNjZXNzOiBvblNhdmVTdWNjZXNzLAogICAgZXJyb3I6IG9uU2F2ZUZhaWx1cmUKICB9KTsKfQoKZnVuY3Rpb24gb25DYXB0dXJlRmFpbHVyZShtZXNzYWdlKSB7CiAgYWxlcnQoJ29uQ2FwdHVyZUZhaWx1cmUgJyArIG1lc3NhZ2UpOwp9CgpmdW5jdGlvbiBjYXB0dXJlUGhvdG8oKSB7CiAgY29uc29sZS5sb2coImNhcHR1cmVQaG90byIpOwogIG5hdmlnYXRvci5jYW1lcmEuZ2V0UGljdHVyZShvbkNhcHR1cmVTdWNjZXNzLCBvbkNhcHR1cmVGYWlsdXJlLCB7IHF1YWxpdHk6IDEwIH0pOwp9CgoKCnZhciBzaW5jZSA9IDA7CmZ1bmN0aW9uIGNoYW5nZXNDYWxsYmFjayhvcHRzKSB7CiAgc2luY2UgPSBvcHRzLmxhc3Rfc2VxIHx8IHNpbmNlOwogIG9uREJDaGFuZ2Uob3B0cyk7CiAgJC5hamF4KHsKICAgIHR5cGU6ICdHRVQnLAogICAgdXJsOiAnL3Bob3Rvc2hhcmUvX2NoYW5nZXM/ZmVlZD1sb25ncG9sbCZmaWx0ZXI9cGhvdG9zaGFyZS90aHVtYm5haWwmc2luY2U9JytzaW5jZSwKICAgIGRhdGFUeXBlOiAnanNvbicsCiAgICBzdWNjZXNzOiBjaGFuZ2VzQ2FsbGJhY2ssCiAgICBlcnJvcjogZnVuY3Rpb24oKSB7CiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgY29uc29sZS5sb2coImVycm9yIGNoYW5nZXMiKTsKICAgICAgICBjb25zb2xlLmxvZyhvcHRzKTsKICAgICAgICBjaGFuZ2VzQ2FsbGJhY2soe2xhc3Rfc2VxIDogc2luY2V9KTsKICAgICAgfSwgMjUwKQogICAgfQogIH0pOwp9CgoKZnVuY3Rpb24gc2V0dXBDaGFuZ2VzKCkgewogIGNoYW5nZXNDYWxsYmFjayh7bGFzdF9zZXEgOiAwfSk7Cn0KCmZ1bmN0aW9uIG9uREJDaGFuZ2Uob3B0cykgewogIC8vIGFwcGVuZCBuZXcgcGljdHVyZXMgdG8gdGhlIHZpZXcgd2l0aG91dCBkaXN0dXJiaW5nIG9sZCBvbmVzCiAgbGlzdFBpY3R1cmVzKG9wdHMpOwp9CgpmdW5jdGlvbiBsaXN0UGljdHVyZXMoZGF0YSkgewogIGlmIChkYXRhLnJlc3VsdHMpIHsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5yZXN1bHRzLmxlbmd0aDsgaSsrKSB7CiAgICAgIGlmKCFkYXRhLnJlc3VsdHNbaV0uZGVsZXRlZCkgewogICAgICAgIGFkZEltYWdlKGRhdGEucmVzdWx0c1tpXS5pZCk7CiAgICAgIH0KICAgIH0KICB9Cn0KCmZ1bmN0aW9uIHNlbmRDb21tZW50KCkgewogICAgdmFyIGNvbW1lbnREb2MgPSB7CiAgICAgICJ0eXBlIjogImNvbW1lbnQiLAogICAgICAicGhvdG8iOiBzZWxlY3RlZFBpY3R1cmVJZCwKICAgICAgImF1dGhvciI6ICQoJyNjb21tZW50LWF1dGhvcicpLnZhbCgpLAogICAgICAiY29tbWVudCI6ICQoJyNjb21tZW50LXRleHQnKS52YWwoKQogICAgfTsKCiAgICB2YXIgb25Db21tZW50U3VjY2VzcyA9IGZ1bmN0aW9uKHJlc3BvbnNlKSB7CiAgICAgIGFkZENvbW1lbnQoY29tbWVudERvYyk7CiAgICB9OwoKICAgIHZhciBvbkNvbW1lbnRGYWlsdXJlID0gZnVuY3Rpb24oeGhyLCB0eXBlKSB7CiAgICAgIGFsZXJ0KHR5cGUgKyAnICcgKyB4aHIucmVzcG9uc2VUZXh0KTsKICAgIH07CgogICAgQ291Y2hEYlBsdWdpbi5zYXZlKGNvbW1lbnREb2MsIG9uQ29tbWVudFN1Y2Nlc3MsIG9uQ29tbWVudEZhaWx1cmUpOwp9CgpmdW5jdGlvbiBvbkltYWdlQ2xpY2soKSB7CiAgLy8gRklYTUU6IG1heWJlIHVzZSBhIGhpZGRlbiBmaWVsZCBpbnN0ZWFkPwogIHNlbGVjdGVkUGljdHVyZUlkID0gdGhpcy5pZDsKICAkKCcjcGhvdG92aWV3LWltYWdlJykuYXR0cignc3JjJywgJy9waG90b3NoYXJlLycrdGhpcy5pZCsnL29yaWdpbmFsLmpwZycpLmNzcygnd2lkdGgnLCAnMTAwJScpOwogICQoJyNwaG90b3ZpZXcnKS5jc3MoIi13ZWJraXQtdHJhbnNmb3JtIiwidHJhbnNsYXRlKDAsMCkiKTsKCiAgdmFyIG9uRmV0Y2hTdWNjZXNzID0gZnVuY3Rpb24ocmVzcG9uc2UpIHsKICAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlKSk7CiAgICBmb3IodmFyIGkgPSAwICwgaiA9IHJlc3BvbnNlLnJvd3MubGVuZ3RoIDsgaSA8IGogOyBpKyspIHsKICAgICAgYWRkQ29tbWVudChyZXNwb25zZS5yb3dzW2ldLnZhbHVlKTsKICAgIH0KICAgICQoJyNwaG90b3ZpZXcnKS5zaG93KCk7CiAgICAkKCcjbWFpbicpLmhpZGUoKTsKICAgICQoJyNzZW5kLWNvbW1lbnQnKS5jbGljayhzZW5kQ29tbWVudCk7CiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdiYWNrYnV0dG9uJywgYmFja0tleURvd24sIHRydWUpOwogIH07CgogIHZhciBvbkZldGNoRmFpbHVyZSA9IGZ1bmN0aW9uKHhociwgdHlwZSkgewogICAgY29uc29sZS5sb2codHlwZSArICcgJyArIHhoci5yZXNwb25zZVRleHQpOwogIH0KICBjb25zb2xlLmxvZyhzZWxlY3RlZFBpY3R1cmVJZCk7CiAgJC5hamF4KHsKICAgdHlwZTogJ0dFVCcsCiAgIHVybDogJy9waG90b3NoYXJlL19kZXNpZ24vcGhvdG9zaGFyZS9fdmlldy9waG90b19hbmRfY29tbWVudHM/c3RhcnRrZXk9WyInK3NlbGVjdGVkUGljdHVyZUlkKyciLDFdJmVuZGtleT1bIicrc2VsZWN0ZWRQaWN0dXJlSWQrJyIsMV0nLAogICBkYXRhVHlwZTogJ2pzb24nLAogICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLAogICBzdWNjZXNzOiBvbkZldGNoU3VjY2VzcywKICAgZXJyb3I6IG9uRmV0Y2hGYWlsdXJlCiAgfSk7Cn0KCmZ1bmN0aW9uIGJhY2tLZXlEb3duKCkgewogIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2JhY2tidXR0b24nLCBiYWNrS2V5RG93biwgdHJ1ZSk7CiAgJCgnI3NlbmQtY29tbWVudCcpLnVuYmluZCgnY2xpY2snKTsKICAkKCcjcGhvdG92aWV3JykuY3NzKCItd2Via2l0LXRyYW5zZm9ybSIsInRyYW5zbGF0ZSgxMDAlLDApIik7CiAgJCgnI3Bob3RvdmlldycpLmhpZGUoKTsKICBjbGVhclBob3RvVmlldygpOwogICQoJyNtYWluJykuc2hvdygpOwp9CgpmdW5jdGlvbiBzdGFydENhbWVyYSgpIHsKICB2YXIgY2FwdHVyZSA9ICQoJyNjYXB0dXJlUGhvdG8nKTsKICBjYXB0dXJlLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJyk7Cn0KCgpmdW5jdGlvbiBzdGFydCgpIHsKICAgIC8vIHNldHVwIGxpc3Rpbmcgb2YgcGljdHVyZXMgYW5kIGF1dG8gcmVmcmVzaAogICAgc2V0dXBDaGFuZ2VzKCk7CiAgICBzZXR1cFN5bmMoKTsKfQoKdmFyIHN0YXJ0ZWQgPSBmYWxzZTsKZnVuY3Rpb24gc3RhcnRBcHAoKSB7CiAgICBpZiAoc3RhcnRlZCkgcmV0dXJuOwogICAgc3RhcnRlZCA9IHRydWU7CiAgICBzdGFydCgpOwp9OwoKZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigiZGV2aWNlcmVhZHkiLCBzdGFydENhbWVyYSwgdHJ1ZSk7CiQoJ2JvZHknKS5yZWFkeShzdGFydEFwcCk7Cg=="},"script/.capture.js.swp":{"content_type":"","revpos":7,"data":""},"vendor/zepto/zepto.min.js":{"content_type":"application/javascript","revpos":1,"data":""},"vendor/phonegap/phonegap-1.0.0.js":{"content_type":"application/javascript","revpos":1,"data":""},"vendor/zepto/zepto.js":{"content_type":"application/javascript","revpos":1,"data":"Ly8gICAgIFplcHRvLmpzCi8vICAgICAoYykgMjAxMCwgMjAxMSBUaG9tYXMgRnVjaHMKLy8gICAgIFplcHRvLmpzIG1heSBiZSBmcmVlbHkgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLgoKKGZ1bmN0aW9uKHVuZGVmaW5lZCl7CiAgaWYgKFN0cmluZy5wcm90b3R5cGUudHJpbSA9PT0gdW5kZWZpbmVkKSAvLyBmaXggZm9yIGlPUyAzLjIKICAgIFN0cmluZy5wcm90b3R5cGUudHJpbSA9IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzLnJlcGxhY2UoL15ccysvLCAnJykucmVwbGFjZSgvXHMrJC8sICcnKSB9OwoKICAvLyBGb3IgaU9TIDMueAogIC8vIGZyb20gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvcmVkdWNlCiAgaWYgKEFycmF5LnByb3RvdHlwZS5yZWR1Y2UgPT09IHVuZGVmaW5lZCkKICAgIEFycmF5LnByb3RvdHlwZS5yZWR1Y2UgPSBmdW5jdGlvbihmdW4pewogICAgICBpZih0aGlzID09PSB2b2lkIDAgfHwgdGhpcyA9PT0gbnVsbCkgdGhyb3cgbmV3IFR5cGVFcnJvcigpOwogICAgICB2YXIgdCA9IE9iamVjdCh0aGlzKSwgbGVuID0gdC5sZW5ndGggPj4+IDAsIGsgPSAwLCBhY2N1bXVsYXRvcjsKICAgICAgaWYodHlwZW9mIGZ1biAhPSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgVHlwZUVycm9yKCk7CiAgICAgIGlmKGxlbiA9PSAwICYmIGFyZ3VtZW50cy5sZW5ndGggPT0gMSkgdGhyb3cgbmV3IFR5cGVFcnJvcigpOwoKICAgICAgaWYoYXJndW1lbnRzLmxlbmd0aCA+PSAyKQogICAgICAgYWNjdW11bGF0b3IgPSBhcmd1bWVudHNbMV07CiAgICAgIGVsc2UKICAgICAgICBkb3sKICAgICAgICAgIGlmKGsgaW4gdCl7CiAgICAgICAgICAgIGFjY3VtdWxhdG9yID0gdFtrKytdOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICAgIGlmKCsrayA+PSBsZW4pIHRocm93IG5ldyBUeXBlRXJyb3IoKTsKICAgICAgICB9IHdoaWxlICh0cnVlKTsKCiAgICAgIHdoaWxlIChrIDwgbGVuKXsKICAgICAgICBpZihrIGluIHQpIGFjY3VtdWxhdG9yID0gZnVuLmNhbGwodW5kZWZpbmVkLCBhY2N1bXVsYXRvciwgdFtrXSwgaywgdCk7CiAgICAgICAgaysrOwogICAgICB9CiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjsKICAgIH07Cgp9KSgpOwovLyAgICAgWmVwdG8uanMKLy8gICAgIChjKSAyMDEwLCAyMDExIFRob21hcyBGdWNocwovLyAgICAgWmVwdG8uanMgbWF5IGJlIGZyZWVseSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuCgp2YXIgWmVwdG8gPSAoZnVuY3Rpb24oKSB7CiAgdmFyIHVuZGVmaW5lZCwga2V5LCAkJCwgY2xhc3NMaXN0LCBlbXB0eUFycmF5ID0gW10sIHNsaWNlID0gZW1wdHlBcnJheS5zbGljZSwKICAgIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50LAogICAgZWxlbWVudERpc3BsYXkgPSB7fSwgY2xhc3NDYWNoZSA9IHt9LAogICAgZ2V0Q29tcHV0ZWRTdHlsZSA9IGRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUsCiAgICBjc3NOdW1iZXIgPSB7ICdjb2x1bW4tY291bnQnOiAxLCAnY29sdW1ucyc6IDEsICdmb250LXdlaWdodCc6IDEsICdsaW5lLWhlaWdodCc6IDEsJ29wYWNpdHknOiAxLCAnei1pbmRleCc6IDEsICd6b29tJzogMSB9LAogICAgZnJhZ21lbnRSRSA9IC9eXHMqPChcdyspW14+XSo+LywKICAgIGVsZW1lbnRUeXBlcyA9IFsxLCA5LCAxMV0sCiAgICBhZGphY2VuY3lPcGVyYXRvcnMgPSBbJ3ByZXBlbmQnLCAnYWZ0ZXInLCAnYmVmb3JlJywgJ2FwcGVuZCddLAogICAgcmV2ZXJzZUFkamFjZW5jeU9wZXJhdG9ycyA9IFsnYXBwZW5kJywgJ3ByZXBlbmQnXSwKICAgIHRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGFibGUnKSwKICAgIHRhYmxlUm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHInKSwKICAgIGNvbnRhaW5lcnMgPSB7CiAgICAgICd0cic6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3Rib2R5JyksCiAgICAgICd0Ym9keSc6IHRhYmxlLCAndGhlYWQnOiB0YWJsZSwgJ3Rmb290JzogdGFibGUsCiAgICAgICd0ZCc6IHRhYmxlUm93LCAndGgnOiB0YWJsZVJvdywKICAgICAgJyonOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKQogICAgfTsKCiAgZnVuY3Rpb24gaXNGKHZhbHVlKSB7IHJldHVybiAoe30pLnRvU3RyaW5nLmNhbGwodmFsdWUpID09ICJbb2JqZWN0IEZ1bmN0aW9uXSIgfQogIGZ1bmN0aW9uIGlzTyh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBPYmplY3QgfQogIGZ1bmN0aW9uIGlzQSh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBBcnJheSB9CiAgZnVuY3Rpb24gbGlrZUFycmF5KG9iaikgeyByZXR1cm4gdHlwZW9mIG9iai5sZW5ndGggPT0gJ251bWJlcicgfQoKICBmdW5jdGlvbiBjb21wYWN0KGFycmF5KSB7IHJldHVybiBhcnJheS5maWx0ZXIoZnVuY3Rpb24oaXRlbSl7IHJldHVybiBpdGVtICE9PSB1bmRlZmluZWQgJiYgaXRlbSAhPT0gbnVsbCB9KSB9CiAgZnVuY3Rpb24gZmxhdHRlbihhcnJheSkgeyByZXR1cm4gYXJyYXkubGVuZ3RoID4gMCA/IFtdLmNvbmNhdC5hcHBseShbXSwgYXJyYXkpIDogYXJyYXkgfQogIGZ1bmN0aW9uIGNhbWVsaXplKHN0cikgIHsgcmV0dXJuIHN0ci5yZXBsYWNlKC8tKyguKT8vZywgZnVuY3Rpb24obWF0Y2gsIGNocil7IHJldHVybiBjaHIgPyBjaHIudG9VcHBlckNhc2UoKSA6ICcnIH0pIH0KICBmdW5jdGlvbiBkYXNoZXJpemUoc3RyKXsKICAgIHJldHVybiBzdHIucmVwbGFjZSgvOjovZywgJy8nKQogICAgICAgICAgIC5yZXBsYWNlKC8oW0EtWl0rKShbQS1aXVthLXpdKS9nLCAnJDFfJDInKQogICAgICAgICAgIC5yZXBsYWNlKC8oW2EtelxkXSkoW0EtWl0pL2csICckMV8kMicpCiAgICAgICAgICAgLnJlcGxhY2UoL18vZywgJy0nKQogICAgICAgICAgIC50b0xvd2VyQ2FzZSgpOwogIH0KICBmdW5jdGlvbiB1bmlxKGFycmF5KSAgICB7IHJldHVybiBhcnJheS5maWx0ZXIoZnVuY3Rpb24oaXRlbSxpbmRleCxhcnJheSl7IHJldHVybiBhcnJheS5pbmRleE9mKGl0ZW0pID09IGluZGV4IH0pIH0KCiAgZnVuY3Rpb24gY2xhc3NSRShuYW1lKXsKICAgIHJldHVybiBuYW1lIGluIGNsYXNzQ2FjaGUgPwogICAgICBjbGFzc0NhY2hlW25hbWVdIDogKGNsYXNzQ2FjaGVbbmFtZV0gPSBuZXcgUmVnRXhwKCcoXnxcXHMpJyArIG5hbWUgKyAnKFxcc3wkKScpKTsKICB9CgogIGZ1bmN0aW9uIG1heWJlQWRkUHgobmFtZSwgdmFsdWUpIHsgcmV0dXJuICh0eXBlb2YgdmFsdWUgPT0gIm51bWJlciIgJiYgIWNzc051bWJlcltkYXNoZXJpemUobmFtZSldKSA/IHZhbHVlICsgInB4IiA6IHZhbHVlOyB9CgogIGZ1bmN0aW9uIGRlZmF1bHREaXNwbGF5KG5vZGVOYW1lKSB7CiAgICB2YXIgZWxlbWVudCwgZGlzcGxheTsKICAgIGlmICghZWxlbWVudERpc3BsYXlbbm9kZU5hbWVdKSB7CiAgICAgIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5vZGVOYW1lKTsKICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbGVtZW50KTsKICAgICAgZGlzcGxheSA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwgJycpLmdldFByb3BlcnR5VmFsdWUoImRpc3BsYXkiKTsKICAgICAgZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsZW1lbnQpOwogICAgICBkaXNwbGF5ID09ICJub25lIiAmJiAoZGlzcGxheSA9ICJibG9jayIpOwogICAgICBlbGVtZW50RGlzcGxheVtub2RlTmFtZV0gPSBkaXNwbGF5OwogICAgfQogICAgcmV0dXJuIGVsZW1lbnREaXNwbGF5W25vZGVOYW1lXTsKICB9CgogIGZ1bmN0aW9uIGZyYWdtZW50KGh0bWwsIG5hbWUpIHsKICAgIGlmIChuYW1lID09PSB1bmRlZmluZWQpIGZyYWdtZW50UkUudGVzdChodG1sKSAmJiBSZWdFeHAuJDE7CiAgICBpZiAoIShuYW1lIGluIGNvbnRhaW5lcnMpKSBuYW1lID0gJyonOwogICAgdmFyIGNvbnRhaW5lciA9IGNvbnRhaW5lcnNbbmFtZV07CiAgICBjb250YWluZXIuaW5uZXJIVE1MID0gJycgKyBodG1sOwogICAgcmV0dXJuIHNsaWNlLmNhbGwoY29udGFpbmVyLmNoaWxkTm9kZXMpOwogIH0KCiAgZnVuY3Rpb24gWihkb20sIHNlbGVjdG9yKXsKICAgIGRvbSA9IGRvbSB8fCBlbXB0eUFycmF5OwogICAgZG9tLl9fcHJvdG9fXyA9IFoucHJvdG90eXBlOwogICAgZG9tLnNlbGVjdG9yID0gc2VsZWN0b3IgfHwgJyc7CiAgICByZXR1cm4gZG9tOwogIH0KCiAgZnVuY3Rpb24gJChzZWxlY3RvciwgY29udGV4dCl7CiAgICBpZiAoIXNlbGVjdG9yKSByZXR1cm4gWigpOwogICAgaWYgKGNvbnRleHQgIT09IHVuZGVmaW5lZCkgcmV0dXJuICQoY29udGV4dCkuZmluZChzZWxlY3Rvcik7CiAgICBlbHNlIGlmIChpc0Yoc2VsZWN0b3IpKSByZXR1cm4gJChkb2N1bWVudCkucmVhZHkoc2VsZWN0b3IpOwogICAgZWxzZSBpZiAoc2VsZWN0b3IgaW5zdGFuY2VvZiBaKSByZXR1cm4gc2VsZWN0b3I7CiAgICBlbHNlIHsKICAgICAgdmFyIGRvbTsKICAgICAgaWYgKGlzQShzZWxlY3RvcikpIGRvbSA9IGNvbXBhY3Qoc2VsZWN0b3IpOwogICAgICBlbHNlIGlmIChlbGVtZW50VHlwZXMuaW5kZXhPZihzZWxlY3Rvci5ub2RlVHlwZSkgPj0gMCB8fCBzZWxlY3RvciA9PT0gd2luZG93KQogICAgICAgIGRvbSA9IFtzZWxlY3Rvcl0sIHNlbGVjdG9yID0gbnVsbDsKICAgICAgZWxzZSBpZiAoZnJhZ21lbnRSRS50ZXN0KHNlbGVjdG9yKSkKICAgICAgICBkb20gPSBmcmFnbWVudChzZWxlY3RvciwgUmVnRXhwLiQxKSwgc2VsZWN0b3IgPSBudWxsOwogICAgICBlbHNlIGlmIChzZWxlY3Rvci5ub2RlVHlwZSAmJiBzZWxlY3Rvci5ub2RlVHlwZSA9PSAzKSBkb20gPSBbc2VsZWN0b3JdOwogICAgICBlbHNlIGRvbSA9ICQkKGRvY3VtZW50LCBzZWxlY3Rvcik7CiAgICAgIHJldHVybiBaKGRvbSwgc2VsZWN0b3IpOwogICAgfQogIH0KCiAgJC5leHRlbmQgPSBmdW5jdGlvbih0YXJnZXQpewogICAgc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpLmZvckVhY2goZnVuY3Rpb24oc291cmNlKSB7CiAgICAgIGZvciAoa2V5IGluIHNvdXJjZSkgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsKICAgIH0pCiAgICByZXR1cm4gdGFyZ2V0OwogIH0KICAkLnFzYSA9ICQkID0gZnVuY3Rpb24oZWxlbWVudCwgc2VsZWN0b3IpeyByZXR1cm4gc2xpY2UuY2FsbChlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKSB9CgogIGZ1bmN0aW9uIGZpbHRlcmVkKG5vZGVzLCBzZWxlY3Rvcil7CiAgICByZXR1cm4gc2VsZWN0b3IgPT09IHVuZGVmaW5lZCA/ICQobm9kZXMpIDogJChub2RlcykuZmlsdGVyKHNlbGVjdG9yKTsKICB9CgogIGZ1bmN0aW9uIGZ1bmNBcmcoY29udGV4dCwgYXJnLCBpZHgsIHBheWxvYWQpewogICByZXR1cm4gaXNGKGFyZykgPyBhcmcuY2FsbChjb250ZXh0LCBpZHgsIHBheWxvYWQpIDogYXJnOwogIH0KCiAgJC5pc0Z1bmN0aW9uID0gaXNGOwogICQuaXNPYmplY3QgPSBpc087CiAgJC5pc0FycmF5ID0gaXNBOwoKICAkLm1hcCA9IGZ1bmN0aW9uKGVsZW1lbnRzLCBjYWxsYmFjaykgewogICAgdmFyIHZhbHVlLCB2YWx1ZXMgPSBbXSwgaSwga2V5OwogICAgaWYgKGxpa2VBcnJheShlbGVtZW50cykpCiAgICAgIGZvciAoaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykgewogICAgICAgIHZhbHVlID0gY2FsbGJhY2soZWxlbWVudHNbaV0sIGkpOwogICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB2YWx1ZXMucHVzaCh2YWx1ZSk7CiAgICAgIH0KICAgIGVsc2UKICAgICAgZm9yIChrZXkgaW4gZWxlbWVudHMpIHsKICAgICAgICB2YWx1ZSA9IGNhbGxiYWNrKGVsZW1lbnRzW2tleV0sIGtleSk7CiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHZhbHVlcy5wdXNoKHZhbHVlKTsKICAgICAgfQogICAgcmV0dXJuIGZsYXR0ZW4odmFsdWVzKTsKICB9CgogICQuZWFjaCA9IGZ1bmN0aW9uKGVsZW1lbnRzLCBjYWxsYmFjaykgewogICAgdmFyIGksIGtleTsKICAgIGlmIChsaWtlQXJyYXkoZWxlbWVudHMpKQogICAgICBmb3IoaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykgewogICAgICAgIGlmKGNhbGxiYWNrKGksIGVsZW1lbnRzW2ldKSA9PT0gZmFsc2UpIHJldHVybiBlbGVtZW50czsKICAgICAgfQogICAgZWxzZQogICAgICBmb3Ioa2V5IGluIGVsZW1lbnRzKSB7CiAgICAgICAgaWYoY2FsbGJhY2soa2V5LCBlbGVtZW50c1trZXldKSA9PT0gZmFsc2UpIHJldHVybiBlbGVtZW50czsKICAgICAgfQogICAgcmV0dXJuIGVsZW1lbnRzOwogIH0KCiAgJC5mbiA9IHsKICAgIGZvckVhY2g6IGVtcHR5QXJyYXkuZm9yRWFjaCwKICAgIHJlZHVjZTogZW1wdHlBcnJheS5yZWR1Y2UsCiAgICBwdXNoOiBlbXB0eUFycmF5LnB1c2gsCiAgICBpbmRleE9mOiBlbXB0eUFycmF5LmluZGV4T2YsCiAgICBjb25jYXQ6IGVtcHR5QXJyYXkuY29uY2F0LAogICAgbWFwOiBmdW5jdGlvbihmbil7CiAgICAgIHJldHVybiAkLm1hcCh0aGlzLCBmdW5jdGlvbihlbCwgaSl7IHJldHVybiBmbi5jYWxsKGVsLCBpLCBlbCkgfSk7CiAgICB9LAogICAgc2xpY2U6IGZ1bmN0aW9uKCl7CiAgICAgIHJldHVybiAkKHNsaWNlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpOwogICAgfSwKICAgIHJlYWR5OiBmdW5jdGlvbihjYWxsYmFjayl7CiAgICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09ICdjb21wbGV0ZScgfHwgZG9jdW1lbnQucmVhZHlTdGF0ZSA9PSAnbG9hZGVkJykgY2FsbGJhY2soKTsKICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGNhbGxiYWNrLCBmYWxzZSk7CiAgICAgIHJldHVybiB0aGlzOwogICAgfSwKICAgIGdldDogZnVuY3Rpb24oaWR4KXsgcmV0dXJuIGlkeCA9PT0gdW5kZWZpbmVkID8gdGhpcyA6IHRoaXNbaWR4XSB9LAogICAgc2l6ZTogZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXMubGVuZ3RoIH0sCiAgICByZW1vdmU6IGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgaWYgKHRoaXMucGFyZW50Tm9kZSAhPSBudWxsKSB7CiAgICAgICAgICB0aGlzLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcyk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0sCiAgICBlYWNoOiBmdW5jdGlvbihjYWxsYmFjayl7CiAgICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbihlbCwgaWR4KXsgY2FsbGJhY2suY2FsbChlbCwgaWR4LCBlbCkgfSk7CiAgICAgIHJldHVybiB0aGlzOwogICAgfSwKICAgIGZpbHRlcjogZnVuY3Rpb24oc2VsZWN0b3IpewogICAgICByZXR1cm4gJChbXS5maWx0ZXIuY2FsbCh0aGlzLCBmdW5jdGlvbihlbGVtZW50KXsKICAgICAgICByZXR1cm4gJCQoZWxlbWVudC5wYXJlbnROb2RlLCBzZWxlY3RvcikuaW5kZXhPZihlbGVtZW50KSA+PSAwOwogICAgICB9KSk7CiAgICB9LAogICAgZW5kOiBmdW5jdGlvbigpewogICAgICByZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8ICQoKTsKICAgIH0sCiAgICBhZGQ6ZnVuY3Rpb24oc2VsZWN0b3IsY29udGV4dCl7CiAgICAgIHJldHVybiAkKHVuaXEodGhpcy5jb25jYXQoJChzZWxlY3Rvcixjb250ZXh0KSkpKTsKICAgIH0sCiAgICBpczogZnVuY3Rpb24oc2VsZWN0b3IpewogICAgICByZXR1cm4gdGhpcy5sZW5ndGggPiAwICYmICQodGhpc1swXSkuZmlsdGVyKHNlbGVjdG9yKS5sZW5ndGggPiAwOwogICAgfSwKICAgIG5vdDogZnVuY3Rpb24oc2VsZWN0b3IpewogICAgICB2YXIgbm9kZXM9W107CiAgICAgIGlmIChpc0Yoc2VsZWN0b3IpICYmIHNlbGVjdG9yLmNhbGwgIT09IHVuZGVmaW5lZCkKICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24oaWR4KXsKICAgICAgICAgIGlmICghc2VsZWN0b3IuY2FsbCh0aGlzLGlkeCkpIG5vZGVzLnB1c2godGhpcyk7CiAgICAgICAgfSk7CiAgICAgIGVsc2UgewogICAgICAgIHZhciBleGNsdWRlcyA9IHR5cGVvZiBzZWxlY3RvciA9PSAnc3RyaW5nJyA/IHRoaXMuZmlsdGVyKHNlbGVjdG9yKSA6CiAgICAgICAgICAobGlrZUFycmF5KHNlbGVjdG9yKSAmJiBpc0Yoc2VsZWN0b3IuaXRlbSkpID8gc2xpY2UuY2FsbChzZWxlY3RvcikgOiAkKHNlbGVjdG9yKTsKICAgICAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24oZWwpewogICAgICAgICAgaWYgKGV4Y2x1ZGVzLmluZGV4T2YoZWwpIDwgMCkgbm9kZXMucHVzaChlbCk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgICAgcmV0dXJuICQobm9kZXMpOwogICAgfSwKICAgIGVxOiBmdW5jdGlvbihpZHgpewogICAgICByZXR1cm4gaWR4ID09PSAtMSA/IHRoaXMuc2xpY2UoaWR4KSA6IHRoaXMuc2xpY2UoaWR4LCArIGlkeCArIDEpOwogICAgfSwKICAgIGZpcnN0OiBmdW5jdGlvbigpeyByZXR1cm4gJCh0aGlzWzBdKSB9LAogICAgbGFzdDogZnVuY3Rpb24oKXsgcmV0dXJuICQodGhpc1t0aGlzLmxlbmd0aCAtIDFdKSB9LAogICAgZmluZDogZnVuY3Rpb24oc2VsZWN0b3IpewogICAgICB2YXIgcmVzdWx0OwogICAgICBpZiAodGhpcy5sZW5ndGggPT0gMSkgcmVzdWx0ID0gJCQodGhpc1swXSwgc2VsZWN0b3IpOwogICAgICBlbHNlIHJlc3VsdCA9IHRoaXMubWFwKGZ1bmN0aW9uKCl7IHJldHVybiAkJCh0aGlzLCBzZWxlY3RvcikgfSk7CiAgICAgIHJldHVybiAkKHJlc3VsdCk7CiAgICB9LAogICAgY2xvc2VzdDogZnVuY3Rpb24oc2VsZWN0b3IsIGNvbnRleHQpewogICAgICB2YXIgbm9kZSA9IHRoaXNbMF0sIG5vZGVzID0gJCQoY29udGV4dCAhPT0gdW5kZWZpbmVkID8gY29udGV4dCA6IGRvY3VtZW50LCBzZWxlY3Rvcik7CiAgICAgIGlmIChub2Rlcy5sZW5ndGggPT09IDApIG5vZGUgPSBudWxsOwogICAgICB3aGlsZShub2RlICYmIG5vZGUgIT09IGRvY3VtZW50ICYmIG5vZGVzLmluZGV4T2Yobm9kZSkgPCAwKSBub2RlID0gbm9kZS5wYXJlbnROb2RlOwogICAgICByZXR1cm4gJChub2RlICE9PSBkb2N1bWVudCAmJiBub2RlKTsKICAgIH0sCiAgICBwYXJlbnRzOiBmdW5jdGlvbihzZWxlY3Rvcil7CiAgICAgIHZhciBhbmNlc3RvcnMgPSBbXSwgbm9kZXMgPSB0aGlzOwogICAgICB3aGlsZSAobm9kZXMubGVuZ3RoID4gMCkKICAgICAgICBub2RlcyA9ICQubWFwKG5vZGVzLCBmdW5jdGlvbihub2RlKXsKICAgICAgICAgIGlmICgobm9kZSA9IG5vZGUucGFyZW50Tm9kZSkgJiYgbm9kZSAhPT0gZG9jdW1lbnQgJiYgYW5jZXN0b3JzLmluZGV4T2Yobm9kZSkgPCAwKSB7CiAgICAgICAgICAgIGFuY2VzdG9ycy5wdXNoKG5vZGUpOwogICAgICAgICAgICByZXR1cm4gbm9kZTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgcmV0dXJuIGZpbHRlcmVkKGFuY2VzdG9ycywgc2VsZWN0b3IpOwogICAgfSwKICAgIHBhcmVudDogZnVuY3Rpb24oc2VsZWN0b3IpewogICAgICByZXR1cm4gZmlsdGVyZWQodW5pcSh0aGlzLnBsdWNrKCdwYXJlbnROb2RlJykpLCBzZWxlY3Rvcik7CiAgICB9LAogICAgY2hpbGRyZW46IGZ1bmN0aW9uKHNlbGVjdG9yKXsKICAgICAgcmV0dXJuIGZpbHRlcmVkKHRoaXMubWFwKGZ1bmN0aW9uKCl7IHJldHVybiBzbGljZS5jYWxsKHRoaXMuY2hpbGRyZW4pIH0pLCBzZWxlY3Rvcik7CiAgICB9LAogICAgc2libGluZ3M6IGZ1bmN0aW9uKHNlbGVjdG9yKXsKICAgICAgcmV0dXJuIGZpbHRlcmVkKHRoaXMubWFwKGZ1bmN0aW9uKGksIGVsKXsKICAgICAgICByZXR1cm4gc2xpY2UuY2FsbChlbC5wYXJlbnROb2RlLmNoaWxkcmVuKS5maWx0ZXIoZnVuY3Rpb24oY2hpbGQpeyByZXR1cm4gY2hpbGQhPT1lbCB9KTsKICAgICAgfSksIHNlbGVjdG9yKTsKICAgIH0sCiAgICBlbXB0eTogZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpeyB0aGlzLmlubmVySFRNTCA9ICcnIH0pIH0sCiAgICBwbHVjazogZnVuY3Rpb24ocHJvcGVydHkpeyByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXNbcHJvcGVydHldIH0pIH0sCiAgICBzaG93OiBmdW5jdGlvbigpewogICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewogICAgICAgIHRoaXMuc3R5bGUuZGlzcGxheSA9PSAibm9uZSIgJiYgKHRoaXMuc3R5bGUuZGlzcGxheSA9IG51bGwpOwogICAgICAgIGlmIChnZXRDb21wdXRlZFN0eWxlKHRoaXMsICcnKS5nZXRQcm9wZXJ0eVZhbHVlKCJkaXNwbGF5IikgPT0gIm5vbmUiKSB7CiAgICAgICAgICB0aGlzLnN0eWxlLmRpc3BsYXkgPSBkZWZhdWx0RGlzcGxheSh0aGlzLm5vZGVOYW1lKQogICAgICAgIH0KICAgICAgfSkKICAgIH0sCiAgICByZXBsYWNlV2l0aDogZnVuY3Rpb24obmV3Q29udGVudCkgewogICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewogICAgICAgIHZhciBwYXI9dGhpcy5wYXJlbnROb2RlLG5leHQ9dGhpcy5uZXh0U2libGluZzsKICAgICAgICAkKHRoaXMpLnJlbW92ZSgpOwogICAgICAgIG5leHQgPyAkKG5leHQpLmJlZm9yZShuZXdDb250ZW50KSA6ICQocGFyKS5hcHBlbmQobmV3Q29udGVudCk7CiAgICAgIH0pOwogICAgfSwKICAgIHdyYXA6IGZ1bmN0aW9uKG5ld0NvbnRlbnQpIHsKICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHsKICAgICAgICAkKHRoaXMpLndyYXBBbGwoJChuZXdDb250ZW50KVswXS5jbG9uZU5vZGUoZmFsc2UpKTsKICAgICAgfSk7CiAgICB9LAogICAgd3JhcEFsbDogZnVuY3Rpb24obmV3Q29udGVudCkgewogICAgICBpZiAodGhpc1swXSkgewogICAgICAgICQodGhpc1swXSkuYmVmb3JlKG5ld0NvbnRlbnQgPSAkKG5ld0NvbnRlbnQpKTsKICAgICAgICBuZXdDb250ZW50LmFwcGVuZCh0aGlzKTsKICAgICAgfQogICAgICByZXR1cm4gdGhpczsKICAgIH0sCiAgICB1bndyYXA6IGZ1bmN0aW9uKCl7CiAgICAgIHRoaXMucGFyZW50KCkuZWFjaChmdW5jdGlvbigpewogICAgICAgICQodGhpcykucmVwbGFjZVdpdGgoJCh0aGlzKS5jaGlsZHJlbigpKTsKICAgICAgfSk7CiAgICAgIHJldHVybiB0aGlzOwogICAgfSwKICAgIGhpZGU6IGZ1bmN0aW9uKCl7CiAgICAgIHJldHVybiB0aGlzLmNzcygiZGlzcGxheSIsICJub25lIikKICAgIH0sCiAgICB0b2dnbGU6IGZ1bmN0aW9uKHNldHRpbmcpewogICAgICByZXR1cm4gKHNldHRpbmcgPT09IHVuZGVmaW5lZCA/IHRoaXMuY3NzKCJkaXNwbGF5IikgPT0gIm5vbmUiIDogc2V0dGluZykgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpOwogICAgfSwKICAgIHByZXY6IGZ1bmN0aW9uKCl7IHJldHVybiAkKHRoaXMucGx1Y2soJ3ByZXZpb3VzRWxlbWVudFNpYmxpbmcnKSkgfSwKICAgIG5leHQ6IGZ1bmN0aW9uKCl7IHJldHVybiAkKHRoaXMucGx1Y2soJ25leHRFbGVtZW50U2libGluZycpKSB9LAogICAgaHRtbDogZnVuY3Rpb24oaHRtbCl7CiAgICAgIHJldHVybiBodG1sID09PSB1bmRlZmluZWQgPwogICAgICAgICh0aGlzLmxlbmd0aCA+IDAgPyB0aGlzWzBdLmlubmVySFRNTCA6IG51bGwpIDoKICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24gKGlkeCkgewogICAgICAgICAgdmFyIG9yaWdpbkh0bWwgPSB0aGlzLmlubmVySFRNTDsKICAgICAgICAgICQodGhpcykuZW1wdHkoKS5hcHBlbmQoIGZ1bmNBcmcodGhpcywgaHRtbCwgaWR4LCBvcmlnaW5IdG1sKSApOwogICAgICAgIH0pOwogICAgfSwKICAgIHRleHQ6IGZ1bmN0aW9uKHRleHQpewogICAgICByZXR1cm4gdGV4dCA9PT0gdW5kZWZpbmVkID8KICAgICAgICAodGhpcy5sZW5ndGggPiAwID8gdGhpc1swXS50ZXh0Q29udGVudCA6IG51bGwpIDoKICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24oKXsgdGhpcy50ZXh0Q29udGVudCA9IHRleHQgfSk7CiAgICB9LAogICAgYXR0cjogZnVuY3Rpb24obmFtZSwgdmFsdWUpewogICAgICByZXR1cm4gKHR5cGVvZiBuYW1lID09ICdzdHJpbmcnICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8KICAgICAgICAodGhpcy5sZW5ndGggPiAwICYmIHRoaXNbMF0ubm9kZU5hbWUgPT0gJ0lOUFVUJyAmJiB0aGlzWzBdLnR5cGUgPT0gJ3RleHQnICYmIG5hbWUgPT0gJ3ZhbHVlJykgPyAodGhpcy52YWwoKSkgOgogICAgICAgICh0aGlzLmxlbmd0aCA+IDAgPyB0aGlzWzBdLmdldEF0dHJpYnV0ZShuYW1lKSB8fCAobmFtZSBpbiB0aGlzWzBdID8gdGhpc1swXVtuYW1lXSA6IHVuZGVmaW5lZCkgOiB1bmRlZmluZWQpIDoKICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24oaWR4KXsKICAgICAgICAgIGlmIChpc08obmFtZSkpIGZvciAoa2V5IGluIG5hbWUpIHRoaXMuc2V0QXR0cmlidXRlKGtleSwgbmFtZVtrZXldKQogICAgICAgICAgZWxzZSB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCBmdW5jQXJnKHRoaXMsIHZhbHVlLCBpZHgsIHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpKSk7CiAgICAgICAgfSk7CiAgICB9LAogICAgcmVtb3ZlQXR0cjogZnVuY3Rpb24obmFtZSkgewogICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkgeyB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTsgfSk7CiAgICB9LAogICAgZGF0YTogZnVuY3Rpb24obmFtZSwgdmFsdWUpewogICAgICByZXR1cm4gdGhpcy5hdHRyKCdkYXRhLScgKyBuYW1lLCB2YWx1ZSk7CiAgICB9LAogICAgdmFsOiBmdW5jdGlvbih2YWx1ZSl7CiAgICAgIHJldHVybiAodmFsdWUgPT09IHVuZGVmaW5lZCkgPwogICAgICAgICh0aGlzLmxlbmd0aCA+IDAgPyB0aGlzWzBdLnZhbHVlIDogbnVsbCkgOgogICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbigpewogICAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlOwogICAgICAgIH0pOwogICAgfSwKICAgIG9mZnNldDogZnVuY3Rpb24oKXsKICAgICAgaWYodGhpcy5sZW5ndGg9PTApIHJldHVybiBudWxsOwogICAgICB2YXIgb2JqID0gdGhpc1swXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsKICAgICAgcmV0dXJuIHsKICAgICAgICBsZWZ0OiBvYmoubGVmdCArIGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdCwKICAgICAgICB0b3A6IG9iai50b3AgKyBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCwKICAgICAgICB3aWR0aDogb2JqLndpZHRoLAogICAgICAgIGhlaWdodDogb2JqLmhlaWdodAogICAgICB9OwogICAgfSwKICAgIGNzczogZnVuY3Rpb24ocHJvcGVydHksIHZhbHVlKXsKICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIHByb3BlcnR5ID09ICdzdHJpbmcnKQogICAgICAgIHJldHVybiB0aGlzWzBdLnN0eWxlW2NhbWVsaXplKHByb3BlcnR5KV0gfHwgZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzWzBdLCAnJykuZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eSk7CiAgICAgIHZhciBjc3MgPSAnJzsKICAgICAgZm9yIChrZXkgaW4gcHJvcGVydHkpIGNzcyArPSBkYXNoZXJpemUoa2V5KSArICc6JyArIG1heWJlQWRkUHgoa2V5LCBwcm9wZXJ0eVtrZXldKSArICc7JzsKICAgICAgaWYgKHR5cGVvZiBwcm9wZXJ0eSA9PSAnc3RyaW5nJykgY3NzID0gZGFzaGVyaXplKHByb3BlcnR5KSArICI6IiArIG1heWJlQWRkUHgocHJvcGVydHksIHZhbHVlKTsKICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHsgdGhpcy5zdHlsZS5jc3NUZXh0ICs9ICc7JyArIGNzcyB9KTsKICAgIH0sCiAgICBpbmRleDogZnVuY3Rpb24oZWxlbWVudCl7CiAgICAgIHJldHVybiBlbGVtZW50ID8gdGhpcy5pbmRleE9mKCQoZWxlbWVudClbMF0pIDogdGhpcy5wYXJlbnQoKS5jaGlsZHJlbigpLmluZGV4T2YodGhpc1swXSk7CiAgICB9LAogICAgaGFzQ2xhc3M6IGZ1bmN0aW9uKG5hbWUpewogICAgICBpZiAodGhpcy5sZW5ndGggPCAxKSByZXR1cm4gZmFsc2U7CiAgICAgIGVsc2UgcmV0dXJuIGNsYXNzUkUobmFtZSkudGVzdCh0aGlzWzBdLmNsYXNzTmFtZSk7CiAgICB9LAogICAgYWRkQ2xhc3M6IGZ1bmN0aW9uKG5hbWUpewogICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGlkeCkgewogICAgICAgIGNsYXNzTGlzdCA9IFtdOwogICAgICAgIHZhciBjbHMgPSB0aGlzLmNsYXNzTmFtZSwgbmV3TmFtZSA9IGZ1bmNBcmcodGhpcywgbmFtZSwgaWR4LCBjbHMpOwogICAgICAgIG5ld05hbWUuc3BsaXQoL1xzKy9nKS5mb3JFYWNoKGZ1bmN0aW9uKGtsYXNzKSB7CiAgICAgICAgICBpZiAoISQodGhpcykuaGFzQ2xhc3Moa2xhc3MpKSB7CiAgICAgICAgICAgIGNsYXNzTGlzdC5wdXNoKGtsYXNzKQogICAgICAgICAgfQogICAgICAgIH0sIHRoaXMpOwogICAgICAgIGNsYXNzTGlzdC5sZW5ndGggJiYgKHRoaXMuY2xhc3NOYW1lICs9IChjbHMgPyAiICIgOiAiIikgKyBjbGFzc0xpc3Quam9pbigiICIpKQogICAgICB9KTsKICAgIH0sCiAgICByZW1vdmVDbGFzczogZnVuY3Rpb24obmFtZSl7CiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oaWR4KSB7CiAgICAgICAgaWYobmFtZSA9PT0gdW5kZWZpbmVkKQogICAgICAgICAgcmV0dXJuIHRoaXMuY2xhc3NOYW1lID0gJyc7CiAgICAgICAgY2xhc3NMaXN0ID0gdGhpcy5jbGFzc05hbWU7CiAgICAgICAgZnVuY0FyZyh0aGlzLCBuYW1lLCBpZHgsIGNsYXNzTGlzdCkuc3BsaXQoL1xzKy9nKS5mb3JFYWNoKGZ1bmN0aW9uKGtsYXNzKSB7CiAgICAgICAgICBjbGFzc0xpc3QgPSBjbGFzc0xpc3QucmVwbGFjZShjbGFzc1JFKGtsYXNzKSwgIiAiKQogICAgICAgIH0pOwogICAgICAgIHRoaXMuY2xhc3NOYW1lID0gY2xhc3NMaXN0LnRyaW0oKQogICAgICB9KTsKICAgIH0sCiAgICB0b2dnbGVDbGFzczogZnVuY3Rpb24obmFtZSwgd2hlbil7CiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oaWR4KXsKICAgICAgIHZhciBjbHMgPSB0aGlzLmNsYXNzTmFtZSwgbmV3TmFtZSA9IGZ1bmNBcmcodGhpcywgbmFtZSwgaWR4LCBjbHMpOwogICAgICAgKCh3aGVuICE9PSB1bmRlZmluZWQgJiYgIXdoZW4pIHx8ICQodGhpcykuaGFzQ2xhc3MobmV3TmFtZSkpID8KICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcyhuZXdOYW1lKSA6ICQodGhpcykuYWRkQ2xhc3MobmV3TmFtZSkKICAgICAgfSk7CiAgICB9CiAgfTsKCiAgJ2ZpbHRlcixhZGQsbm90LGVxLGZpcnN0LGxhc3QsZmluZCxjbG9zZXN0LHBhcmVudHMscGFyZW50LGNoaWxkcmVuLHNpYmxpbmdzJy5zcGxpdCgnLCcpLmZvckVhY2goZnVuY3Rpb24ocHJvcGVydHkpewogICAgdmFyIGZuID0gJC5mbltwcm9wZXJ0eV07CiAgICAkLmZuW3Byb3BlcnR5XSA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgcmV0ID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgcmV0LnByZXZPYmplY3QgPSB0aGlzOwogICAgICByZXR1cm4gcmV0OwogICAgfQogIH0pOwoKICBbJ3dpZHRoJywgJ2hlaWdodCddLmZvckVhY2goZnVuY3Rpb24ocHJvcGVydHkpewogICAgJC5mbltwcm9wZXJ0eV0gPSBmdW5jdGlvbih2YWx1ZSkgewogICAgICB2YXIgb2Zmc2V0OwogICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gKG9mZnNldCA9IHRoaXMub2Zmc2V0KCkpICYmIG9mZnNldFtwcm9wZXJ0eV0gfQogICAgICBlbHNlIHJldHVybiB0aGlzLmNzcyhwcm9wZXJ0eSwgdmFsdWUpOwogICAgfQogIH0pOwoKICBmdW5jdGlvbiBpbnNlcnQob3BlcmF0b3IsIHRhcmdldCwgbm9kZSkgewogICAgdmFyIHBhcmVudCA9ICghb3BlcmF0b3IgfHwgb3BlcmF0b3IgPT0gMykgPyB0YXJnZXQgOiB0YXJnZXQucGFyZW50Tm9kZTsKICAgIHBhcmVudC5pbnNlcnRCZWZvcmUobm9kZSwKICAgICAgIW9wZXJhdG9yID8gcGFyZW50LmZpcnN0Q2hpbGQgOiAgICAgICAgIC8vIHByZXBlbmQKICAgICAgb3BlcmF0b3IgPT0gMSA/IHRhcmdldC5uZXh0U2libGluZyA6ICAgIC8vIGFmdGVyCiAgICAgIG9wZXJhdG9yID09IDIgPyB0YXJnZXQgOiAgICAgICAgICAgICAgICAvLyBiZWZvcmUKICAgICAgbnVsbCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFwcGVuZAogIH0KCiAgZnVuY3Rpb24gdHJhdmVyc2VOb2RlIChub2RlLCBmdW4pIHsKICAgIGZ1bihub2RlKTsKICAgIGZvciAoa2V5IGluIG5vZGUuY2hpbGROb2RlcykgewogICAgICB0cmF2ZXJzZU5vZGUobm9kZS5jaGlsZE5vZGVzW2tleV0sIGZ1bik7CiAgICB9CiAgfQoKICBhZGphY2VuY3lPcGVyYXRvcnMuZm9yRWFjaChmdW5jdGlvbihrZXksIG9wZXJhdG9yKSB7CiAgICAkLmZuW2tleV0gPSBmdW5jdGlvbihodG1sKXsKICAgICAgdmFyIG5vZGVzID0gdHlwZW9mKGh0bWwpID09ICdvYmplY3QnID8gaHRtbCA6IGZyYWdtZW50KGh0bWwpOwogICAgICBpZiAoISgnbGVuZ3RoJyBpbiBub2RlcykpIG5vZGVzID0gW25vZGVzXTsKICAgICAgaWYgKG5vZGVzLmxlbmd0aCA8IDEpIHJldHVybiB0aGlzOwogICAgICB2YXIgc2l6ZSA9IHRoaXMubGVuZ3RoLCBjb3B5QnlDbG9uZSA9IHNpemUgPiAxLCBpblJldmVyc2UgPSBvcGVyYXRvciA8IDI7CgogICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGluZGV4LCB0YXJnZXQpewogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIHZhciBub2RlID0gbm9kZXNbaW5SZXZlcnNlID8gbm9kZXMubGVuZ3RoLWktMSA6IGldOwogICAgICAgICAgdHJhdmVyc2VOb2RlKG5vZGUsIGZ1bmN0aW9uIChub2RlKSB7CiAgICAgICAgICAgIGlmIChub2RlLm5vZGVOYW1lICE9IG51bGwgJiYgbm9kZS5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpID09PSAnU0NSSVBUJykgewogICAgICAgICAgICAgIHdpbmRvd1snZXZhbCddLmNhbGwod2luZG93LCBub2RlLmlubmVySFRNTCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgICAgaWYgKGNvcHlCeUNsb25lICYmIGluZGV4IDwgc2l6ZSAtIDEpIG5vZGUgPSBub2RlLmNsb25lTm9kZSh0cnVlKTsKICAgICAgICAgIGluc2VydChvcGVyYXRvciwgdGFyZ2V0LCBub2RlKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfTsKICB9KTsKCiAgcmV2ZXJzZUFkamFjZW5jeU9wZXJhdG9ycy5mb3JFYWNoKGZ1bmN0aW9uKGtleSkgewogICAgJC5mbltrZXkrJ1RvJ10gPSBmdW5jdGlvbihodG1sKXsKICAgICAgaWYgKHR5cGVvZihodG1sKSAhPSAnb2JqZWN0JykgaHRtbCA9ICQoaHRtbCk7CiAgICAgIGh0bWxba2V5XSh0aGlzKTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9OwogIH0pOwoKICBaLnByb3RvdHlwZSA9ICQuZm47CgogIHJldHVybiAkOwp9KSgpOwoKJyQnIGluIHdpbmRvdyB8fCAod2luZG93LiQgPSBaZXB0byk7Ci8vICAgICBaZXB0by5qcwovLyAgICAgKGMpIDIwMTAsIDIwMTEgVGhvbWFzIEZ1Y2hzCi8vICAgICBaZXB0by5qcyBtYXkgYmUgZnJlZWx5IGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS4KCihmdW5jdGlvbigkKXsKICB2YXIgJCQgPSAkLnFzYSwgaGFuZGxlcnMgPSB7fSwgX3ppZCA9IDE7CiAgZnVuY3Rpb24gemlkKGVsZW1lbnQpIHsKICAgIHJldHVybiBlbGVtZW50Ll96aWQgfHwgKGVsZW1lbnQuX3ppZCA9IF96aWQrKyk7CiAgfQogIGZ1bmN0aW9uIGZpbmRIYW5kbGVycyhlbGVtZW50LCBldmVudCwgZm4sIHNlbGVjdG9yKSB7CiAgICBldmVudCA9IHBhcnNlKGV2ZW50KTsKICAgIGlmIChldmVudC5ucykgdmFyIG1hdGNoZXIgPSBtYXRjaGVyRm9yKGV2ZW50Lm5zKTsKICAgIHJldHVybiAoaGFuZGxlcnNbemlkKGVsZW1lbnQpXSB8fCBbXSkuZmlsdGVyKGZ1bmN0aW9uKGhhbmRsZXIpIHsKICAgICAgcmV0dXJuIGhhbmRsZXIKICAgICAgICAmJiAoIWV2ZW50LmUgIHx8IGhhbmRsZXIuZSA9PSBldmVudC5lKQogICAgICAgICYmICghZXZlbnQubnMgfHwgbWF0Y2hlci50ZXN0KGhhbmRsZXIubnMpKQogICAgICAgICYmICghZm4gICAgICAgfHwgaGFuZGxlci5mbiA9PSBmbikKICAgICAgICAmJiAoIXNlbGVjdG9yIHx8IGhhbmRsZXIuc2VsID09IHNlbGVjdG9yKTsKICAgIH0pOwogIH0KICBmdW5jdGlvbiBwYXJzZShldmVudCkgewogICAgdmFyIHBhcnRzID0gKCcnICsgZXZlbnQpLnNwbGl0KCcuJyk7CiAgICByZXR1cm4ge2U6IHBhcnRzWzBdLCBuczogcGFydHMuc2xpY2UoMSkuc29ydCgpLmpvaW4oJyAnKX07CiAgfQogIGZ1bmN0aW9uIG1hdGNoZXJGb3IobnMpIHsKICAgIHJldHVybiBuZXcgUmVnRXhwKCcoPzpefCApJyArIG5zLnJlcGxhY2UoJyAnLCAnIC4qID8nKSArICcoPzogfCQpJyk7CiAgfQoKICBmdW5jdGlvbiBhZGQoZWxlbWVudCwgZXZlbnRzLCBmbiwgc2VsZWN0b3IsIGRlbGVnYXRlKXsKICAgIHZhciBpZCA9IHppZChlbGVtZW50KSwgc2V0ID0gKGhhbmRsZXJzW2lkXSB8fCAoaGFuZGxlcnNbaWRdID0gW10pKTsKICAgIGV2ZW50cy5zcGxpdCgvXHMvKS5mb3JFYWNoKGZ1bmN0aW9uKGV2ZW50KXsKICAgICAgdmFyIGNhbGxiYWNrID0gZGVsZWdhdGUgfHwgZm47CiAgICAgIHZhciBwcm94eWZuID0gZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgdmFyIHJlc3VsdCA9IGNhbGxiYWNrLmFwcGx5KGVsZW1lbnQsIFtldmVudF0uY29uY2F0KGV2ZW50LmRhdGEpKTsKICAgICAgICBpZiAocmVzdWx0ID09PSBmYWxzZSkgewogICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgdmFyIGhhbmRsZXIgPSAkLmV4dGVuZChwYXJzZShldmVudCksIHtmbjogZm4sIHByb3h5OiBwcm94eWZuLCBzZWw6IHNlbGVjdG9yLCBkZWw6IGRlbGVnYXRlLCBpOiBzZXQubGVuZ3RofSk7CiAgICAgIHNldC5wdXNoKGhhbmRsZXIpOwogICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoaGFuZGxlci5lLCBwcm94eWZuLCBmYWxzZSk7CiAgICB9KTsKICB9CiAgZnVuY3Rpb24gcmVtb3ZlKGVsZW1lbnQsIGV2ZW50cywgZm4sIHNlbGVjdG9yKXsKICAgIHZhciBpZCA9IHppZChlbGVtZW50KTsKICAgIChldmVudHMgfHwgJycpLnNwbGl0KC9ccy8pLmZvckVhY2goZnVuY3Rpb24oZXZlbnQpewogICAgICBmaW5kSGFuZGxlcnMoZWxlbWVudCwgZXZlbnQsIGZuLCBzZWxlY3RvcikuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVyKXsKICAgICAgICBkZWxldGUgaGFuZGxlcnNbaWRdW2hhbmRsZXIuaV07CiAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGhhbmRsZXIuZSwgaGFuZGxlci5wcm94eSwgZmFsc2UpOwogICAgICB9KTsKICAgIH0pOwogIH0KCiAgJC5ldmVudCA9IHsgYWRkOiBhZGQsIHJlbW92ZTogcmVtb3ZlIH0KCiAgJC5mbi5iaW5kID0gZnVuY3Rpb24oZXZlbnQsIGNhbGxiYWNrKXsKICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXsKICAgICAgYWRkKHRoaXMsIGV2ZW50LCBjYWxsYmFjayk7CiAgICB9KTsKICB9OwogICQuZm4udW5iaW5kID0gZnVuY3Rpb24oZXZlbnQsIGNhbGxiYWNrKXsKICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXsKICAgICAgcmVtb3ZlKHRoaXMsIGV2ZW50LCBjYWxsYmFjayk7CiAgICB9KTsKICB9OwogICQuZm4ub25lID0gZnVuY3Rpb24oZXZlbnQsIGNhbGxiYWNrKXsKICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXsKICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICBhZGQodGhpcywgZXZlbnQsIGZ1bmN0aW9uIHdyYXBwZXIoZXZ0KXsKICAgICAgICBjYWxsYmFjay5jYWxsKHNlbGYsIGV2dCk7CiAgICAgICAgcmVtb3ZlKHNlbGYsIGV2ZW50LCBhcmd1bWVudHMuY2FsbGVlKTsKICAgICAgfSk7CiAgICB9KTsKICB9OwoKICB2YXIgcmV0dXJuVHJ1ZSA9IGZ1bmN0aW9uKCl7cmV0dXJuIHRydWV9LAogICAgICByZXR1cm5GYWxzZSA9IGZ1bmN0aW9uKCl7cmV0dXJuIGZhbHNlfSwKICAgICAgZXZlbnRNZXRob2RzID0gewogICAgICAgIHByZXZlbnREZWZhdWx0OiAnaXNEZWZhdWx0UHJldmVudGVkJywKICAgICAgICBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246ICdpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCcsCiAgICAgICAgc3RvcFByb3BhZ2F0aW9uOiAnaXNQcm9wYWdhdGlvblN0b3BwZWQnCiAgICAgIH07CiAgZnVuY3Rpb24gY3JlYXRlUHJveHkoZXZlbnQpIHsKICAgIHZhciBwcm94eSA9ICQuZXh0ZW5kKHtvcmlnaW5hbEV2ZW50OiBldmVudH0sIGV2ZW50KTsKICAgICQuZWFjaChldmVudE1ldGhvZHMsIGZ1bmN0aW9uKG5hbWUsIHByZWRpY2F0ZSkgewogICAgICBwcm94eVtuYW1lXSA9IGZ1bmN0aW9uKCl7CiAgICAgICAgdGhpc1twcmVkaWNhdGVdID0gcmV0dXJuVHJ1ZTsKICAgICAgICByZXR1cm4gZXZlbnRbbmFtZV0uYXBwbHkoZXZlbnQsIGFyZ3VtZW50cyk7CiAgICAgIH07CiAgICAgIHByb3h5W3ByZWRpY2F0ZV0gPSByZXR1cm5GYWxzZTsKICAgIH0pCiAgICByZXR1cm4gcHJveHk7CiAgfQoKICAkLmZuLmRlbGVnYXRlID0gZnVuY3Rpb24oc2VsZWN0b3IsIGV2ZW50LCBjYWxsYmFjayl7CiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGksIGVsZW1lbnQpewogICAgICBhZGQoZWxlbWVudCwgZXZlbnQsIGNhbGxiYWNrLCBzZWxlY3RvciwgZnVuY3Rpb24oZSwgZGF0YSl7CiAgICAgICAgdmFyIHRhcmdldCA9IGUudGFyZ2V0LCBub2RlcyA9ICQkKGVsZW1lbnQsIHNlbGVjdG9yKTsKICAgICAgICB3aGlsZSAodGFyZ2V0ICYmIG5vZGVzLmluZGV4T2YodGFyZ2V0KSA8IDApIHRhcmdldCA9IHRhcmdldC5wYXJlbnROb2RlOwogICAgICAgIGlmICh0YXJnZXQgJiYgISh0YXJnZXQgPT09IGVsZW1lbnQpICYmICEodGFyZ2V0ID09PSBkb2N1bWVudCkpIHsKICAgICAgICAgIGNhbGxiYWNrLmNhbGwodGFyZ2V0LCAkLmV4dGVuZChjcmVhdGVQcm94eShlKSwgewogICAgICAgICAgICBjdXJyZW50VGFyZ2V0OiB0YXJnZXQsIGxpdmVGaXJlZDogZWxlbWVudAogICAgICAgICAgfSksIGRhdGEpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9KTsKICB9OwogICQuZm4udW5kZWxlZ2F0ZSA9IGZ1bmN0aW9uKHNlbGVjdG9yLCBldmVudCwgY2FsbGJhY2spewogICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpewogICAgICByZW1vdmUodGhpcywgZXZlbnQsIGNhbGxiYWNrLCBzZWxlY3Rvcik7CiAgICB9KTsKICB9CgogICQuZm4ubGl2ZSA9IGZ1bmN0aW9uKGV2ZW50LCBjYWxsYmFjayl7CiAgICAkKGRvY3VtZW50LmJvZHkpLmRlbGVnYXRlKHRoaXMuc2VsZWN0b3IsIGV2ZW50LCBjYWxsYmFjayk7CiAgICByZXR1cm4gdGhpczsKICB9OwogICQuZm4uZGllID0gZnVuY3Rpb24oZXZlbnQsIGNhbGxiYWNrKXsKICAgICQoZG9jdW1lbnQuYm9keSkudW5kZWxlZ2F0ZSh0aGlzLnNlbGVjdG9yLCBldmVudCwgY2FsbGJhY2spOwogICAgcmV0dXJuIHRoaXM7CiAgfTsKCiAgJC5mbi50cmlnZ2VyID0gZnVuY3Rpb24oZXZlbnQsIGRhdGEpewogICAgaWYgKHR5cGVvZiBldmVudCA9PSAnc3RyaW5nJykgZXZlbnQgPSAkLkV2ZW50KGV2ZW50KTsKICAgIGV2ZW50LmRhdGEgPSBkYXRhOwogICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpeyB0aGlzLmRpc3BhdGNoRXZlbnQoZXZlbnQpIH0pOwogIH07CgogIC8vIHRyaWdnZXJzIGV2ZW50IGhhbmRsZXJzIG9uIGN1cnJlbnQgZWxlbWVudCBqdXN0IGFzIGlmIGFuIGV2ZW50IG9jY3VycmVkLAogIC8vIGRvZXNuJ3QgdHJpZ2dlciBhbiBhY3R1YWwgZXZlbnQsIGRvZXNuJ3QgYnViYmxlCiAgJC5mbi50cmlnZ2VySGFuZGxlciA9IGZ1bmN0aW9uKGV2ZW50LCBkYXRhKXsKICAgIHZhciBlLCByZXN1bHQ7CiAgICB0aGlzLmVhY2goZnVuY3Rpb24oaSwgZWxlbWVudCl7CiAgICAgIGUgPSBjcmVhdGVQcm94eSh0eXBlb2YgZXZlbnQgPT0gJ3N0cmluZycgPyAkLkV2ZW50KGV2ZW50KSA6IGV2ZW50KTsKICAgICAgZS5kYXRhID0gZGF0YTsgZS50YXJnZXQgPSBlbGVtZW50OwogICAgICAkLmVhY2goZmluZEhhbmRsZXJzKGVsZW1lbnQsIGV2ZW50LnR5cGUgfHwgZXZlbnQpLCBmdW5jdGlvbihpLCBoYW5kbGVyKXsKICAgICAgICByZXN1bHQgPSBoYW5kbGVyLnByb3h5KGUpOwogICAgICAgIGlmIChlLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkpIHJldHVybiBmYWxzZTsKICAgICAgfSk7CiAgICB9KTsKICAgIHJldHVybiByZXN1bHQ7CiAgfTsKCiAgLy8gc2hvcnRjdXQgbWV0aG9kcyBmb3IgYC5iaW5kKGV2ZW50LCBmbilgIGZvciBlYWNoIGV2ZW50IHR5cGUKICAoJ2ZvY3VzaW4gZm9jdXNvdXQgbG9hZCByZXNpemUgc2Nyb2xsIHVubG9hZCBjbGljayBkYmxjbGljayAnKwogICdtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0ICcrCiAgJ2NoYW5nZSBzZWxlY3Qga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBlcnJvcicpLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbihldmVudCkgewogICAgJC5mbltldmVudF0gPSBmdW5jdGlvbihjYWxsYmFjayl7IHJldHVybiB0aGlzLmJpbmQoZXZlbnQsIGNhbGxiYWNrKSB9OwogIH0pOwoKICBbJ2ZvY3VzJywgJ2JsdXInXS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHsKICAgICQuZm5bbmFtZV0gPSBmdW5jdGlvbihjYWxsYmFjaykgewogICAgICBpZiAoY2FsbGJhY2spIHRoaXMuYmluZChuYW1lLCBjYWxsYmFjayk7CiAgICAgIGVsc2UgaWYgKHRoaXMubGVuZ3RoKSB0cnkgeyB0aGlzLmdldCgwKVtuYW1lXSgpIH0gY2F0Y2goZSl7fTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9OwogIH0pOwoKICAkLkV2ZW50ID0gZnVuY3Rpb24odHlwZSwgcHJvcHMpIHsKICAgIHZhciBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudHMnKTsKICAgIGlmIChwcm9wcykgJC5leHRlbmQoZXZlbnQsIHByb3BzKTsKICAgIGV2ZW50LmluaXRFdmVudCh0eXBlLCAhKHByb3BzICYmIHByb3BzLmJ1YmJsZXMgPT09IGZhbHNlKSwgdHJ1ZSk7CiAgICByZXR1cm4gZXZlbnQ7CiAgfTsKCn0pKFplcHRvKTsKLy8gICAgIFplcHRvLmpzCi8vICAgICAoYykgMjAxMCwgMjAxMSBUaG9tYXMgRnVjaHMKLy8gICAgIFplcHRvLmpzIG1heSBiZSBmcmVlbHkgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLgoKKGZ1bmN0aW9uKCQpewogIGZ1bmN0aW9uIGRldGVjdCh1YSl7CiAgICB2YXIgdWEgPSB1YSwgb3MgPSB7fSwKICAgICAgYW5kcm9pZCA9IHVhLm1hdGNoKC8oQW5kcm9pZClccysoW1xkLl0rKS8pLAogICAgICBpcGFkID0gdWEubWF0Y2goLyhpUGFkKS4qT1NccyhbXGRfXSspLyksCiAgICAgIGlwaG9uZSA9ICFpcGFkICYmIHVhLm1hdGNoKC8oaVBob25lXHNPUylccyhbXGRfXSspLyksCiAgICAgIHdlYm9zID0gdWEubWF0Y2goLyh3ZWJPU3xocHdPUylbXHNcL10oW1xkLl0rKS8pLAogICAgICB0b3VjaHBhZCA9IHdlYm9zICYmIHVhLm1hdGNoKC9Ub3VjaFBhZC8pLAogICAgICBibGFja2JlcnJ5ID0gdWEubWF0Y2goLyhCbGFja0JlcnJ5KS4qVmVyc2lvblwvKFtcZC5dKykvKTsKICAgIGlmIChhbmRyb2lkKSBvcy5hbmRyb2lkID0gdHJ1ZSwgb3MudmVyc2lvbiA9IGFuZHJvaWRbMl07CiAgICBpZiAoaXBob25lKSBvcy5pb3MgPSB0cnVlLCBvcy52ZXJzaW9uID0gaXBob25lWzJdLnJlcGxhY2UoL18vZywgJy4nKSwgb3MuaXBob25lID0gdHJ1ZTsKICAgIGlmIChpcGFkKSBvcy5pb3MgPSB0cnVlLCBvcy52ZXJzaW9uID0gaXBhZFsyXS5yZXBsYWNlKC9fL2csICcuJyksIG9zLmlwYWQgPSB0cnVlOwogICAgaWYgKHdlYm9zKSBvcy53ZWJvcyA9IHRydWUsIG9zLnZlcnNpb24gPSB3ZWJvc1syXTsKICAgIGlmICh0b3VjaHBhZCkgb3MudG91Y2hwYWQgPSB0cnVlOwogICAgaWYgKGJsYWNrYmVycnkpIG9zLmJsYWNrYmVycnkgPSB0cnVlLCBvcy52ZXJzaW9uID0gYmxhY2tiZXJyeVsyXTsKICAgIHJldHVybiBvczsKICB9CgogIC8vICMjIyAkLm9zCiAgLy8KICAvLyBPYmplY3QgY29udGFpbnMgaW5mb3JtYXRpb24gYWJvdXQgcnVubmluZyBlbnZpcm9ubWVudGFsCiAgLy8KICAvLyAqRXhhbXBsZToqCiAgLy8KICAvLyAgICAgJC5vcy5pb3MgICAgICAvLyA9PiB0cnVlIGlmIHJ1bm5pbmcgb24gQXBwbGUgaU9TCiAgLy8gICAgICQub3MuYW5kcm9pZCAgLy8gPT4gdHJ1ZSBpZiBydW5uaW5nIG9uIEFuZHJvaWQKICAvLyAgICAgJC5vcy53ZWJvcyAgICAvLyA9PiB0cnVlIGlmIHJ1bm5pbmcgb24gSFAvUGFsbSBXZWJPUwogIC8vICAgICAkLm9zLnRvdWNocGFkIC8vID0+IHRydWUgaWYgcnVubmluZyBvbiBhIEhQIFRvdWNoUGFkCiAgLy8gICAgICQub3MudmVyc2lvbiAgLy8gPT4gc3RyaW5nIHdpdGggdmVyc2lvbiBudW1iZXIsCiAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgIjQuMCIsICIzLjEuMSIsICIyLjEiLCBldGMuCiAgLy8gICAgICQub3MuaXBob25lICAgLy8gPT4gdHJ1ZSBpZiBydW5uaW5nIG9uIGlQaG9uZQogIC8vICAgICAkLm9zLmlwYWQgICAgIC8vID0+IHRydWUgaWYgcnVubmluZyBvbiBpUGFkCiAgLy8gICAgICQub3MuYmxhY2tiZXJyeSAvLyA9PiB0cnVlIGlmIHJ1bm5pbmcgb24gQmxhY2tCZXJyeQogIC8vCiAgJC5vcyA9IGRldGVjdChuYXZpZ2F0b3IudXNlckFnZW50KTsKICAkLl9fZGV0ZWN0ID0gZGV0ZWN0OwoKICB2YXIgdiA9IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL1dlYktpdFwvKFtcZC5dKykvKTsKICAkLmJyb3dzZXIgPSB2ID8geyB3ZWJraXQ6IHRydWUsIHZlcnNpb246IHZbMV0gfSA6IHsgd2Via2l0OiBmYWxzZSB9OwoKfSkoWmVwdG8pOwovLyAgICAgWmVwdG8uanMKLy8gICAgIChjKSAyMDEwLCAyMDExIFRob21hcyBGdWNocwovLyAgICAgWmVwdG8uanMgbWF5IGJlIGZyZWVseSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuCgooZnVuY3Rpb24oJCwgdW5kZWZpbmVkKXsKICB2YXIgc3VwcG9ydGVkVHJhbnNmb3JtcyA9IFsKICAgICdzY2FsZScsICdzY2FsZVgnLCAnc2NhbGVZJywKICAgICd0cmFuc2xhdGUnLCAndHJhbnNsYXRlWCcsICd0cmFuc2xhdGVZJywgJ3RyYW5zbGF0ZTNkJywKICAgICdza2V3JywgICAgICAnc2tld1gnLCAgICAgICdza2V3WScsCiAgICAncm90YXRlJywgICAgJ3JvdGF0ZVgnLCAgICAncm90YXRlWScsICAgICdyb3RhdGVaJywgICAgJ3JvdGF0ZTNkJywKICAgICdtYXRyaXgnCiAgXTsKCiAgJC5mbi5hbmltID0gZnVuY3Rpb24ocHJvcGVydGllcywgZHVyYXRpb24sIGVhc2UsIGNhbGxiYWNrKXsKICAgIHZhciB0cmFuc2Zvcm1zID0gW10sIGNzc1Byb3BlcnRpZXMgPSB7fSwga2V5LCB0aGF0ID0gdGhpcywgd3JhcHBlZENhbGxiYWNrOwoKICAgIGZvciAoa2V5IGluIHByb3BlcnRpZXMpCiAgICAgIGlmIChzdXBwb3J0ZWRUcmFuc2Zvcm1zLmluZGV4T2Yoa2V5KT49MCkKICAgICAgICB0cmFuc2Zvcm1zLnB1c2goa2V5ICsgJygnICsgcHJvcGVydGllc1trZXldICsgJyknKTsKICAgICAgZWxzZQogICAgICAgIGNzc1Byb3BlcnRpZXNba2V5XSA9IHByb3BlcnRpZXNba2V5XTsKCiAgICB3cmFwcGVkQ2FsbGJhY2sgPSBmdW5jdGlvbigpewogICAgICB0aGF0LmNzcyh7Jy13ZWJraXQtdHJhbnNpdGlvbic6J25vbmUnfSk7CiAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKCk7CiAgICB9CgogICAgaWYgKGR1cmF0aW9uID4gMCkKICAgICAgdGhpcy5vbmUoJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCB3cmFwcGVkQ2FsbGJhY2spOwogICAgZWxzZQogICAgICBzZXRUaW1lb3V0KHdyYXBwZWRDYWxsYmFjaywgMCk7CgogICAgaWYgKHRyYW5zZm9ybXMubGVuZ3RoID4gMCkgewogICAgICBjc3NQcm9wZXJ0aWVzWyctd2Via2l0LXRyYW5zZm9ybSddID0gdHJhbnNmb3Jtcy5qb2luKCcgJykKICAgIH0KCiAgICBjc3NQcm9wZXJ0aWVzWyctd2Via2l0LXRyYW5zaXRpb24nXSA9ICdhbGwgJyArIChkdXJhdGlvbiAhPT0gdW5kZWZpbmVkID8gZHVyYXRpb24gOiAwLjUpICsgJ3MgJyArIChlYXNlIHx8ICcnKTsKCiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgdGhhdC5jc3MoY3NzUHJvcGVydGllcyk7CiAgICB9LCAwKTsKCiAgICByZXR1cm4gdGhpczsKICB9Cn0pKFplcHRvKTsKLy8gICAgIFplcHRvLmpzCi8vICAgICAoYykgMjAxMCwgMjAxMSBUaG9tYXMgRnVjaHMKLy8gICAgIFplcHRvLmpzIG1heSBiZSBmcmVlbHkgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLgoKKGZ1bmN0aW9uKCQpewogIHZhciBqc29ucElEID0gMCwKICAgICAgaXNPYmplY3QgPSAkLmlzT2JqZWN0LAogICAgICBrZXk7CgogIC8vIEVtcHR5IGZ1bmN0aW9uLCB1c2VkIGFzIGRlZmF1bHQgY2FsbGJhY2sKICBmdW5jdGlvbiBlbXB0eSgpIHt9CgogIC8vICMjIyAkLmFqYXhKU09OUAogIC8vCiAgLy8gTG9hZCBKU09OIGZyb20gYSBzZXJ2ZXIgaW4gYSBkaWZmZXJlbnQgZG9tYWluIChKU09OUCkKICAvLwogIC8vICpBcmd1bWVudHM6KgogIC8vCiAgLy8gICAgIG9wdGlvbnMg4oCUIG9iamVjdCB0aGF0IGNvbmZpZ3VyZSB0aGUgcmVxdWVzdCwKICAvLyAgICAgICAgICAgICAgIHNlZSBhdmFsaWFibGUgb3B0aW9ucyBiZWxvdwogIC8vCiAgLy8gKkF2YWxpYWJsZSBvcHRpb25zOioKICAvLwogIC8vICAgICB1cmwgICAgIOKAlCB1cmwgdG8gd2hpY2ggdGhlIHJlcXVlc3QgaXMgc2VudAogIC8vICAgICBzdWNjZXNzIOKAlCBjYWxsYmFjayB0aGF0IGlzIGV4ZWN1dGVkIGlmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzCiAgLy8KICAvLyAqRXhhbXBsZToqCiAgLy8KICAvLyAgICAgJC5hamF4SlNPTlAoewogIC8vICAgICAgICB1cmw6ICAgICAnaHR0cDovL2V4YW1wbGUuY29tL3Byb2plY3RzP2NhbGxiYWNrPT8nLAogIC8vICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkgewogIC8vICAgICAgICAgICAgcHJvamVjdHMucHVzaChqc29uKTsKICAvLyAgICAgICAgfQogIC8vICAgICB9KTsKICAvLwogICQuYWpheEpTT05QID0gZnVuY3Rpb24ob3B0aW9ucyl7CiAgICB2YXIganNvbnBTdHJpbmcgPSAnanNvbnAnICsgKytqc29ucElELAogICAgICAgIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpOwogICAgd2luZG93W2pzb25wU3RyaW5nXSA9IGZ1bmN0aW9uKGRhdGEpewogICAgICBvcHRpb25zLnN1Y2Nlc3MoZGF0YSk7CiAgICAgIGRlbGV0ZSB3aW5kb3dbanNvbnBTdHJpbmddOwogICAgfTsKICAgIHNjcmlwdC5zcmMgPSBvcHRpb25zLnVybC5yZXBsYWNlKC89XD8vLCAnPScgKyBqc29ucFN0cmluZyk7CiAgICAkKCdoZWFkJykuYXBwZW5kKHNjcmlwdCk7CiAgfTsKCiAgLy8gIyMjICQuYWpheFNldHRpbmdzCiAgLy8KICAvLyBBSkFYIHNldHRpbmdzCiAgLy8KICAkLmFqYXhTZXR0aW5ncyA9IHsKICAgIC8vIERlZmF1bHQgdHlwZSBvZiByZXF1ZXN0CiAgICB0eXBlOiAnR0VUJywKICAgIC8vIENhbGxiYWNrIHRoYXQgaXMgZXhlY3V0ZWQgYmVmb3JlIHJlcXVlc3QKICAgIGJlZm9yZVNlbmQ6IGVtcHR5LAogICAgLy8gQ2FsbGJhY2sgdGhhdCBpcyBleGVjdXRlZCBpZiB0aGUgcmVxdWVzdCBzdWNjZWVkcwogICAgc3VjY2VzczogZW1wdHksCiAgICAvLyBDYWxsYmFjayB0aGF0IGlzIGV4ZWN1dGVkIHRoZSB0aGUgc2VydmVyIGRyb3BzIGVycm9yCiAgICBlcnJvcjogZW1wdHksCiAgICAvLyBDYWxsYmFjayB0aGF0IGlzIGV4ZWN1dGVkIG9uIHJlcXVlc3QgY29tcGxldGUgKGJvdGg6IGVycm9yIGFuZCBzdWNjZXNzKQogICAgY29tcGxldGU6IGVtcHR5LAogICAgLy8gTUlNRSB0eXBlcyBtYXBwaW5nCiAgICBhY2NlcHRzOiB7CiAgICAgIHNjcmlwdDogJ3RleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCcsCiAgICAgIGpzb246ICAgJ2FwcGxpY2F0aW9uL2pzb24nLAogICAgICB4bWw6ICAgICdhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sJywKICAgICAgaHRtbDogICAndGV4dC9odG1sJywKICAgICAgdGV4dDogICAndGV4dC9wbGFpbicKICAgIH0KICB9OwoKICAvLyAjIyMgJC5hamF4CiAgLy8KICAvLyBQZXJmb3JtIEFKQVggcmVxdWVzdAogIC8vCiAgLy8gKkFyZ3VtZW50czoqCiAgLy8KICAvLyAgICAgb3B0aW9ucyDigJQgb2JqZWN0IHRoYXQgY29uZmlndXJlIHRoZSByZXF1ZXN0LAogIC8vICAgICAgICAgICAgICAgc2VlIGF2YWxpYWJsZSBvcHRpb25zIGJlbG93CiAgLy8KICAvLyAqQXZhbGlhYmxlIG9wdGlvbnM6KgogIC8vCiAgLy8gICAgIHR5cGUgKCdHRVQnKSAgICAgICAgICDigJQgdHlwZSBvZiByZXF1ZXN0IEdFVCAvIFBPU1QKICAvLyAgICAgdXJsICh3aW5kb3cubG9jYXRpb24pIOKAlCB1cmwgdG8gd2hpY2ggdGhlIHJlcXVlc3QgaXMgc2VudAogIC8vICAgICBkYXRhICAgICAgICAgICAgICAgICAg4oCUIGRhdGEgdG8gc2VuZCB0byBzZXJ2ZXIsCiAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbiBiZSBzdHJpbmcgb3Igb2JqZWN0CiAgLy8gICAgIGRhdGFUeXBlICgnanNvbicpICAgICDigJQgd2hhdCByZXNwb25zZSB0eXBlIHlvdSBhY2NlcHQgZnJvbQogIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgc2VydmVyOgogIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnanNvbicsICd4bWwnLCAnaHRtbCcsIG9yICd0ZXh0JwogIC8vICAgICBzdWNjZXNzICAgICAgICAgICAgICAg4oCUIGNhbGxiYWNrIHRoYXQgaXMgZXhlY3V0ZWQgaWYKICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHJlcXVlc3Qgc3VjY2VlZHMKICAvLyAgICAgZXJyb3IgICAgICAgICAgICAgICAgIOKAlCBjYWxsYmFjayB0aGF0IGlzIGV4ZWN1dGVkIGlmCiAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBzZXJ2ZXIgZHJvcHMgZXJyb3IKICAvLwogIC8vICpFeGFtcGxlOioKICAvLwogIC8vICAgICAkLmFqYXgoewogIC8vICAgICAgICB0eXBlOiAgICAgJ1BPU1QnLAogIC8vICAgICAgICB1cmw6ICAgICAgJy9wcm9qZWN0cycsCiAgLy8gICAgICAgIGRhdGE6ICAgICB7IG5hbWU6ICdaZXB0by5qcycgfSwKICAvLyAgICAgICAgZGF0YVR5cGU6ICdodG1sJywKICAvLyAgICAgICAgc3VjY2VzczogIGZ1bmN0aW9uIChkYXRhKSB7CiAgLy8gICAgICAgICAgICAkKCdib2R5JykuYXBwZW5kKGRhdGEpOwogIC8vICAgICAgICB9LAogIC8vICAgICAgICBlcnJvcjogICAgZnVuY3Rpb24gKHhociwgdHlwZSkgewogIC8vICAgICAgICAgICAgYWxlcnQoJ0Vycm9yIScpOwogIC8vICAgICAgICB9CiAgLy8gICAgIH0pOwogIC8vCiAgJC5hamF4ID0gZnVuY3Rpb24ob3B0aW9ucyl7CiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsKICAgIHZhciBzZXR0aW5ncyA9ICQuZXh0ZW5kKHt9LCBvcHRpb25zKTsKICAgIGZvciAoa2V5IGluICQuYWpheFNldHRpbmdzKSBpZiAoIXNldHRpbmdzW2tleV0pIHNldHRpbmdzW2tleV0gPSAkLmFqYXhTZXR0aW5nc1trZXldOwoKICAgIGlmICgvPVw/Ly50ZXN0KHNldHRpbmdzLnVybCkpIHJldHVybiAkLmFqYXhKU09OUChzZXR0aW5ncyk7CgogICAgaWYgKCFzZXR0aW5ncy51cmwpIHNldHRpbmdzLnVybCA9IHdpbmRvdy5sb2NhdGlvbi50b1N0cmluZygpOwogICAgaWYgKHNldHRpbmdzLmRhdGEgJiYgIXNldHRpbmdzLmNvbnRlbnRUeXBlKSBzZXR0aW5ncy5jb250ZW50VHlwZSA9ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnOwogICAgaWYgKGlzT2JqZWN0KHNldHRpbmdzLmRhdGEpKSBzZXR0aW5ncy5kYXRhID0gJC5wYXJhbShzZXR0aW5ncy5kYXRhKTsKCiAgICBpZiAoc2V0dGluZ3MudHlwZS5tYXRjaCgvZ2V0L2kpICYmIHNldHRpbmdzLmRhdGEpIHsKICAgICAgdmFyIHF1ZXJ5U3RyaW5nID0gc2V0dGluZ3MuZGF0YTsKICAgICAgaWYgKHNldHRpbmdzLnVybC5tYXRjaCgvXD8uKj0vKSkgewogICAgICAgIHF1ZXJ5U3RyaW5nID0gJyYnICsgcXVlcnlTdHJpbmc7CiAgICAgIH0gZWxzZSBpZiAocXVlcnlTdHJpbmdbMF0gIT0gJz8nKSB7CiAgICAgICAgcXVlcnlTdHJpbmcgPSAnPycgKyBxdWVyeVN0cmluZzsKICAgICAgfQogICAgICBzZXR0aW5ncy51cmwgKz0gcXVlcnlTdHJpbmc7CiAgICB9CgogICAgdmFyIG1pbWUgPSBzZXR0aW5ncy5hY2NlcHRzW3NldHRpbmdzLmRhdGFUeXBlXSwKICAgICAgICB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTsKCiAgICBzZXR0aW5ncy5oZWFkZXJzID0gJC5leHRlbmQoeydYLVJlcXVlc3RlZC1XaXRoJzogJ1hNTEh0dHBSZXF1ZXN0J30sIHNldHRpbmdzLmhlYWRlcnMgfHwge30pOwogICAgaWYgKG1pbWUpIHNldHRpbmdzLmhlYWRlcnNbJ0FjY2VwdCddID0gbWltZTsKCiAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKXsKICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09IDQpIHsKICAgICAgICB2YXIgcmVzdWx0LCBlcnJvciA9IGZhbHNlOwogICAgICAgIGlmICgoeGhyLnN0YXR1cyA+PSAyMDAgJiYgeGhyLnN0YXR1cyA8IDMwMCkgfHwgeGhyLnN0YXR1cyA9PSAwKSB7CiAgICAgICAgICBpZiAobWltZSA9PSAnYXBwbGljYXRpb24vanNvbicgJiYgISh4aHIucmVzcG9uc2VUZXh0ID09ICcnKSkgewogICAgICAgICAgICB0cnkgeyByZXN1bHQgPSBKU09OLnBhcnNlKHhoci5yZXNwb25zZVRleHQpOyB9CiAgICAgICAgICAgIGNhdGNoIChlKSB7IGVycm9yID0gZTsgfQogICAgICAgICAgfQogICAgICAgICAgZWxzZSByZXN1bHQgPSB4aHIucmVzcG9uc2VUZXh0OwogICAgICAgICAgaWYgKGVycm9yKSBzZXR0aW5ncy5lcnJvcih4aHIsICdwYXJzZXJlcnJvcicsIGVycm9yKTsKICAgICAgICAgIGVsc2Ugc2V0dGluZ3Muc3VjY2VzcyhyZXN1bHQsICdzdWNjZXNzJywgeGhyKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZXJyb3IgPSB0cnVlOwogICAgICAgICAgc2V0dGluZ3MuZXJyb3IoeGhyLCAnZXJyb3InKTsKICAgICAgICB9CiAgICAgICAgc2V0dGluZ3MuY29tcGxldGUoeGhyLCBlcnJvciA/ICdlcnJvcicgOiAnc3VjY2VzcycpOwogICAgICB9CiAgICB9OwoKICAgIHhoci5vcGVuKHNldHRpbmdzLnR5cGUsIHNldHRpbmdzLnVybCwgdHJ1ZSk7CiAgICBpZiAoc2V0dGluZ3MuYmVmb3JlU2VuZCh4aHIsIHNldHRpbmdzKSA9PT0gZmFsc2UpIHsKICAgICAgeGhyLmFib3J0KCk7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICBpZiAoc2V0dGluZ3MuY29udGVudFR5cGUpIHNldHRpbmdzLmhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gc2V0dGluZ3MuY29udGVudFR5cGU7CiAgICBmb3IgKG5hbWUgaW4gc2V0dGluZ3MuaGVhZGVycykgeGhyLnNldFJlcXVlc3RIZWFkZXIobmFtZSwgc2V0dGluZ3MuaGVhZGVyc1tuYW1lXSk7CiAgICB4aHIuc2VuZChzZXR0aW5ncy5kYXRhKTsKCiAgICByZXR1cm4geGhyOwogIH07CgogIC8vICMjIyAkLmdldAogIC8vCiAgLy8gTG9hZCBkYXRhIGZyb20gdGhlIHNlcnZlciB1c2luZyBhIEdFVCByZXF1ZXN0CiAgLy8KICAvLyAqQXJndW1lbnRzOioKICAvLwogIC8vICAgICB1cmwgICAgIOKAlCB1cmwgdG8gd2hpY2ggdGhlIHJlcXVlc3QgaXMgc2VudAogIC8vICAgICBzdWNjZXNzIOKAlCBjYWxsYmFjayB0aGF0IGlzIGV4ZWN1dGVkIGlmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzCiAgLy8KICAvLyAqRXhhbXBsZToqCiAgLy8KICAvLyAgICAgJC5nZXQoCiAgLy8gICAgICAgICcvcHJvamVjdHMvNDInLAogIC8vICAgICAgICBmdW5jdGlvbiAoZGF0YSkgewogIC8vICAgICAgICAgICAgJCgnYm9keScpLmFwcGVuZChkYXRhKTsKICAvLyAgICAgICAgfQogIC8vICAgICApOwogIC8vCiAgJC5nZXQgPSBmdW5jdGlvbih1cmwsIHN1Y2Nlc3MpeyAkLmFqYXgoeyB1cmw6IHVybCwgc3VjY2Vzczogc3VjY2VzcyB9KSB9OwoKICAvLyAjIyMgJC5wb3N0CiAgLy8KICAvLyBMb2FkIGRhdGEgZnJvbSB0aGUgc2VydmVyIHVzaW5nIFBPU1QgcmVxdWVzdAogIC8vCiAgLy8gKkFyZ3VtZW50czoqCiAgLy8KICAvLyAgICAgdXJsICAgICAgICDigJQgdXJsIHRvIHdoaWNoIHRoZSByZXF1ZXN0IGlzIHNlbnQKICAvLyAgICAgW2RhdGFdICAgICDigJQgZGF0YSB0byBzZW5kIHRvIHNlcnZlciwgY2FuIGJlIHN0cmluZyBvciBvYmplY3QKICAvLyAgICAgW3N1Y2Nlc3NdICDigJQgY2FsbGJhY2sgdGhhdCBpcyBleGVjdXRlZCBpZiB0aGUgcmVxdWVzdCBzdWNjZWVkcwogIC8vICAgICBbZGF0YVR5cGVdIOKAlCB0eXBlIG9mIGV4cGVjdGVkIHJlc3BvbnNlCiAgLy8gICAgICAgICAgICAgICAgICAnanNvbicsICd4bWwnLCAnaHRtbCcsIG9yICd0ZXh0JwogIC8vCiAgLy8gKkV4YW1wbGU6KgogIC8vCiAgLy8gICAgICQucG9zdCgKICAvLyAgICAgICAgJy9wcm9qZWN0cycsCiAgLy8gICAgICAgIHsgbmFtZTogJ1plcHRvLmpzJyB9LAogIC8vICAgICAgICBmdW5jdGlvbiAoZGF0YSkgewogIC8vICAgICAgICAgICAgJCgnYm9keScpLmFwcGVuZChkYXRhKTsKICAvLyAgICAgICAgfSwKICAvLyAgICAgICAgJ2h0bWwnCiAgLy8gICAgICk7CiAgLy8KICAkLnBvc3QgPSBmdW5jdGlvbih1cmwsIGRhdGEsIHN1Y2Nlc3MsIGRhdGFUeXBlKXsKICAgIGlmICgkLmlzRnVuY3Rpb24oZGF0YSkpIGRhdGFUeXBlID0gZGF0YVR5cGUgfHwgc3VjY2Vzcywgc3VjY2VzcyA9IGRhdGEsIGRhdGEgPSBudWxsOwogICAgJC5hamF4KHsgdHlwZTogJ1BPU1QnLCB1cmw6IHVybCwgZGF0YTogZGF0YSwgc3VjY2Vzczogc3VjY2VzcywgZGF0YVR5cGU6IGRhdGFUeXBlIH0pOwogIH07CgogIC8vICMjIyAkLmdldEpTT04KICAvLwogIC8vIExvYWQgSlNPTiBmcm9tIHRoZSBzZXJ2ZXIgdXNpbmcgR0VUIHJlcXVlc3QKICAvLwogIC8vICpBcmd1bWVudHM6KgogIC8vCiAgLy8gICAgIHVybCAgICAg4oCUIHVybCB0byB3aGljaCB0aGUgcmVxdWVzdCBpcyBzZW50CiAgLy8gICAgIHN1Y2Nlc3Mg4oCUIGNhbGxiYWNrIHRoYXQgaXMgZXhlY3V0ZWQgaWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHMKICAvLwogIC8vICpFeGFtcGxlOioKICAvLwogIC8vICAgICAkLmdldEpTT04oCiAgLy8gICAgICAgICcvcHJvamVjdHMvNDInLAogIC8vICAgICAgICBmdW5jdGlvbiAoanNvbikgewogIC8vICAgICAgICAgICAgcHJvamVjdHMucHVzaChqc29uKTsKICAvLyAgICAgICAgfQogIC8vICAgICApOwogIC8vCiAgJC5nZXRKU09OID0gZnVuY3Rpb24odXJsLCBzdWNjZXNzKXsgJC5hamF4KHsgdXJsOiB1cmwsIHN1Y2Nlc3M6IHN1Y2Nlc3MsIGRhdGFUeXBlOiAnanNvbicgfSkgfTsKCiAgLy8gIyMjICQuZm4ubG9hZAogIC8vCiAgLy8gTG9hZCBkYXRhIGZyb20gdGhlIHNlcnZlciBpbnRvIGFuIGVsZW1lbnQKICAvLwogIC8vICpBcmd1bWVudHM6KgogIC8vCiAgLy8gICAgIHVybCAgICAg4oCUIHVybCB0byB3aGljaCB0aGUgcmVxdWVzdCBpcyBzZW50CiAgLy8gICAgIFtzdWNjZXNzXSDigJQgY2FsbGJhY2sgdGhhdCBpcyBleGVjdXRlZCBpZiB0aGUgcmVxdWVzdCBzdWNjZWVkcwogIC8vCiAgLy8gKkV4YW1wbGVzOioKICAvLwogIC8vICAgICAkKCcjcHJvamVjdF9jb250YWluZXInKS5nZXQoCiAgLy8gICAgICAgICcvcHJvamVjdHMvNDInLAogIC8vICAgICAgICBmdW5jdGlvbiAoKSB7CiAgLy8gICAgICAgICAgICBhbGVydCgnUHJvamVjdCB3YXMgc3VjY2Vzc2Z1bGx5IGxvYWRlZCcpOwogIC8vICAgICAgICB9CiAgLy8gICAgICk7CiAgLy8KICAvLyAgICAgJCgnI3Byb2plY3RfY29tbWVudHMnKS5nZXQoCiAgLy8gICAgICAgICcvcHJvamVjdHMvNDIgI2NvbW1lbnRzJywKICAvLyAgICAgICAgZnVuY3Rpb24gKCkgewogIC8vICAgICAgICAgICAgYWxlcnQoJ0NvbW1lbnRzIHdhcyBzdWNjZXNzZnVsbHkgbG9hZGVkJyk7CiAgLy8gICAgICAgIH0KICAvLyAgICAgKTsKICAvLwogICQuZm4ubG9hZCA9IGZ1bmN0aW9uKHVybCwgc3VjY2Vzcyl7CiAgICBpZiAoIXRoaXMubGVuZ3RoKSByZXR1cm4gdGhpczsKICAgIHZhciBzZWxmID0gdGhpcywgcGFydHMgPSB1cmwuc3BsaXQoL1xzLyksIHNlbGVjdG9yOwogICAgaWYgKHBhcnRzLmxlbmd0aCA+IDEpIHVybCA9IHBhcnRzWzBdLCBzZWxlY3RvciA9IHBhcnRzWzFdOwogICAgJC5nZXQodXJsLCBmdW5jdGlvbihyZXNwb25zZSl7CiAgICAgIHNlbGYuaHRtbChzZWxlY3RvciA/CiAgICAgICAgJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSkuaHRtbChyZXNwb25zZSkuZmluZChzZWxlY3RvcikuaHRtbCgpCiAgICAgICAgOiByZXNwb25zZSk7CiAgICAgIHN1Y2Nlc3MgJiYgc3VjY2VzcygpOwogICAgfSk7CiAgICByZXR1cm4gdGhpczsKICB9OwoKICAvLyAjIyMgJC5wYXJhbQogIC8vCiAgLy8gRW5jb2RlIG9iamVjdCBhcyBhIHN0cmluZyBmb3Igc3VibWlzc2lvbgogIC8vCiAgLy8gKkFyZ3VtZW50czoqCiAgLy8KICAvLyAgICAgb2JqIOKAlCBvYmplY3QgdG8gc2VyaWFsaXplCiAgLy8gICAgIFt2XSDigJQgcm9vdCBub2RlCiAgLy8KICAvLyAqRXhhbXBsZToqCiAgLy8KICAvLyAgICAgJC5wYXJhbSggeyBuYW1lOiAnWmVwdG8uanMnLCB2ZXJzaW9uOiAnMC42JyB9ICk7CiAgLy8KICAkLnBhcmFtID0gZnVuY3Rpb24ob2JqLCB2KXsKICAgIHZhciByZXN1bHQgPSBbXSwgYWRkID0gZnVuY3Rpb24oa2V5LCB2YWx1ZSl7CiAgICAgIHJlc3VsdC5wdXNoKGVuY29kZVVSSUNvbXBvbmVudCh2ID8gdiArICdbJyArIGtleSArICddJyA6IGtleSkKICAgICAgICArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpOwogICAgICB9LAogICAgICBpc09iakFycmF5ID0gJC5pc0FycmF5KG9iaik7CgogICAgZm9yKGtleSBpbiBvYmopCiAgICAgIGlmKGlzT2JqZWN0KG9ialtrZXldKSkKICAgICAgICByZXN1bHQucHVzaCgkLnBhcmFtKG9ialtrZXldLCAodiA/IHYgKyAnWycgKyBrZXkgKyAnXScgOiBrZXkpKSk7CiAgICAgIGVsc2UKICAgICAgICBhZGQoaXNPYmpBcnJheSA/ICcnIDoga2V5LCBvYmpba2V5XSk7CgogICAgcmV0dXJuIHJlc3VsdC5qb2luKCcmJykucmVwbGFjZSgnJTIwJywgJysnKTsKICB9Owp9KShaZXB0byk7Ci8vICAgICBaZXB0by5qcwovLyAgICAgKGMpIDIwMTAsIDIwMTEgVGhvbWFzIEZ1Y2hzCi8vICAgICBaZXB0by5qcyBtYXkgYmUgZnJlZWx5IGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS4KCihmdW5jdGlvbiAoJCkgewoKICAvLyAjIyMgJC5mbi5zZXJpYWxpemVBcnJheQogIC8vCiAgLy8gRW5jb2RlIGEgc2V0IG9mIGZvcm0gZWxlbWVudHMgYXMgYW4gYXJyYXkgb2YgbmFtZXMgYW5kIHZhbHVlcwogIC8vCiAgLy8gKkV4YW1wbGU6KgogIC8vCiAgLy8gICAgICQoJyNsb2dpbl9mb3JtJykuc2VyaWFsaXplQXJyYXkoKTsKICAvLwogIC8vICByZXR1cm5zCiAgLy8KICAvLyAgICAgWwogIC8vICAgICAgICAgewogIC8vICAgICAgICAgICAgIG5hbWU6ICdlbWFpbCcsCiAgLy8gICAgICAgICAgICAgdmFsdWU6ICdrb3NzQG5vY29ycC5tZScKICAvLyAgICAgICAgIH0sCiAgLy8gICAgICAgICB7CiAgLy8gICAgICAgICAgICAgbmFtZTogJ3Bhc3N3b3JkJywKICAvLyAgICAgICAgICAgICB2YWx1ZTogJzEyMzQ1NicKICAvLyAgICAgICAgIH0KICAvLyAgICAgXQogIC8vCiAgJC5mbi5zZXJpYWxpemVBcnJheSA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciByZXN1bHQgPSBbXSwgZWw7CiAgICAkKCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLmdldCgwKS5lbGVtZW50cykgKS5lYWNoKGZ1bmN0aW9uICgpIHsKICAgICAgZWwgPSAkKHRoaXMpOwogICAgICBpZiAoIChlbC5hdHRyKCd0eXBlJykgIT09ICdyYWRpbycgfHwgZWwuaXMoJzpjaGVja2VkJykpICYmICEoZWwuYXR0cigndHlwZScpID09PSAnY2hlY2tib3gnICYmICFlbC5pcygnOmNoZWNrZWQnKSkpIHsKICAgICAgICByZXN1bHQucHVzaCh7CiAgICAgICAgICBuYW1lOiBlbC5hdHRyKCduYW1lJyksCiAgICAgICAgICB2YWx1ZTogZWwudmFsKCkKICAgICAgICB9KTsKICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gcmVzdWx0OwogIH07CgogIC8vICMjIyAkLmZuLnNlcmlhbGl6ZQogIC8vCiAgLy8KICAvLyBFbmNvZGUgYSBzZXQgb2YgZm9ybSBlbGVtZW50cyBhcyBhIHN0cmluZyBmb3Igc3VibWlzc2lvbgogIC8vCiAgLy8gKkV4YW1wbGU6KgogIC8vCiAgLy8gICAgICQoJyNsb2dpbl9mb3JtJykuc2VyaWFsaXplKCk7CiAgLy8KICAvLyAgcmV0dXJucwogIC8vCiAgLy8gICAgICJlbWFpbD1rb3NzJTQwbm9jb3JwLm1lJnBhc3N3b3JkPTEyMzQ1NiIKICAvLwogICQuZm4uc2VyaWFsaXplID0gZnVuY3Rpb24gKCkgewogICAgdmFyIHJlc3VsdCA9IFtdOwogICAgdGhpcy5zZXJpYWxpemVBcnJheSgpLmZvckVhY2goZnVuY3Rpb24gKGVsbSkgewogICAgICByZXN1bHQucHVzaCggZW5jb2RlVVJJQ29tcG9uZW50KGVsbS5uYW1lKSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChlbG0udmFsdWUpICk7CiAgICB9KTsKICAgIHJldHVybiByZXN1bHQuam9pbignJicpOwogIH07CgogIC8vICMjIyAkLmZuLnN1Ym1pdAogIC8vCiAgLy8gQmluZCBvciB0cmlnZ2VyIHRoZSBzdWJtaXQgZXZlbnQgZm9yIGEgZm9ybQogIC8vCiAgLy8gKkV4YW1wbGVzOioKICAvLwogIC8vIFRvIGJpbmQgYSBoYW5kbGVyIGZvciB0aGUgc3VibWl0IGV2ZW50OgogIC8vCiAgLy8gICAgICQoJyNsb2dpbl9mb3JtJykuc3VibWl0KGZ1bmN0aW9uIChlKSB7CiAgLy8gICAgICAgICBhbGVydCgnRm9ybSB3YXMgc3VibWl0dGVkIScpOwogIC8vICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogIC8vICAgICB9KTsKICAvLwogIC8vIFRvIHRyaWdnZXIgZm9ybSBzdWJtaXQ6CiAgLy8KICAvLyAgICAgJCgnI2xvZ2luX2Zvcm0nKS5zdWJtaXQoKTsKICAvLwogICQuZm4uc3VibWl0ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7CiAgICBpZiAoY2FsbGJhY2spIHRoaXMuYmluZCgnc3VibWl0JywgY2FsbGJhY2spCiAgICBlbHNlIGlmICh0aGlzLmxlbmd0aCkgewogICAgICB2YXIgZXZlbnQgPSAkLkV2ZW50KCdzdWJtaXQnKTsKICAgICAgdGhpcy5lcSgwKS50cmlnZ2VyKGV2ZW50KTsKICAgICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkKSB0aGlzLmdldCgwKS5zdWJtaXQoKQogICAgfQogICAgcmV0dXJuIHRoaXM7CiAgfQoKfSkoWmVwdG8pOwovLyAgICAgWmVwdG8uanMKLy8gICAgIChjKSAyMDEwLCAyMDExIFRob21hcyBGdWNocwovLyAgICAgWmVwdG8uanMgbWF5IGJlIGZyZWVseSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuCgooZnVuY3Rpb24oJCl7CiAgdmFyIHRvdWNoID0ge30sIHRvdWNoVGltZW91dDsKCiAgZnVuY3Rpb24gcGFyZW50SWZUZXh0KG5vZGUpewogICAgcmV0dXJuICd0YWdOYW1lJyBpbiBub2RlID8gbm9kZSA6IG5vZGUucGFyZW50Tm9kZTsKICB9CgogIGZ1bmN0aW9uIHN3aXBlRGlyZWN0aW9uKHgxLCB4MiwgeTEsIHkyKXsKICAgIHZhciB4RGVsdGEgPSBNYXRoLmFicyh4MSAtIHgyKSwgeURlbHRhID0gTWF0aC5hYnMoeTEgLSB5Mik7CiAgICBpZiAoeERlbHRhID49IHlEZWx0YSkgewogICAgICByZXR1cm4gKHgxIC0geDIgPiAwID8gJ0xlZnQnIDogJ1JpZ2h0Jyk7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gKHkxIC0geTIgPiAwID8gJ1VwJyA6ICdEb3duJyk7CiAgICB9CiAgfQoKICB2YXIgbG9uZ1RhcERlbGF5ID0gNzUwOwogIGZ1bmN0aW9uIGxvbmdUYXAoKXsKICAgIGlmICh0b3VjaC5sYXN0ICYmIChEYXRlLm5vdygpIC0gdG91Y2gubGFzdCA+PSBsb25nVGFwRGVsYXkpKSB7CiAgICAgICQodG91Y2gudGFyZ2V0KS50cmlnZ2VyKCdsb25nVGFwJyk7CiAgICAgIHRvdWNoID0ge307CiAgICB9CiAgfQoKICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpewogICAgJChkb2N1bWVudC5ib2R5KS5iaW5kKCd0b3VjaHN0YXJ0JywgZnVuY3Rpb24oZSl7CiAgICAgIHZhciBub3cgPSBEYXRlLm5vdygpLCBkZWx0YSA9IG5vdyAtICh0b3VjaC5sYXN0IHx8IG5vdyk7CiAgICAgIHRvdWNoLnRhcmdldCA9IHBhcmVudElmVGV4dChlLnRvdWNoZXNbMF0udGFyZ2V0KTsKICAgICAgdG91Y2hUaW1lb3V0ICYmIGNsZWFyVGltZW91dCh0b3VjaFRpbWVvdXQpOwogICAgICB0b3VjaC54MSA9IGUudG91Y2hlc1swXS5wYWdlWDsKICAgICAgdG91Y2gueTEgPSBlLnRvdWNoZXNbMF0ucGFnZVk7CiAgICAgIGlmIChkZWx0YSA+IDAgJiYgZGVsdGEgPD0gMjUwKSB0b3VjaC5pc0RvdWJsZVRhcCA9IHRydWU7CiAgICAgIHRvdWNoLmxhc3QgPSBub3c7CiAgICAgIHNldFRpbWVvdXQobG9uZ1RhcCwgbG9uZ1RhcERlbGF5KTsKICAgIH0pLmJpbmQoJ3RvdWNobW92ZScsIGZ1bmN0aW9uKGUpewogICAgICB0b3VjaC54MiA9IGUudG91Y2hlc1swXS5wYWdlWDsKICAgICAgdG91Y2gueTIgPSBlLnRvdWNoZXNbMF0ucGFnZVk7CiAgICB9KS5iaW5kKCd0b3VjaGVuZCcsIGZ1bmN0aW9uKGUpewogICAgICBpZiAodG91Y2guaXNEb3VibGVUYXApIHsKICAgICAgICAkKHRvdWNoLnRhcmdldCkudHJpZ2dlcignZG91YmxlVGFwJyk7CiAgICAgICAgdG91Y2ggPSB7fTsKICAgICAgfSBlbHNlIGlmICh0b3VjaC54MiA+IDAgfHwgdG91Y2gueTIgPiAwKSB7CiAgICAgICAgKE1hdGguYWJzKHRvdWNoLngxIC0gdG91Y2gueDIpID4gMzAgfHwgTWF0aC5hYnModG91Y2gueTEgLSB0b3VjaC55MikgPiAzMCkgICYmCiAgICAgICAgICAkKHRvdWNoLnRhcmdldCkudHJpZ2dlcignc3dpcGUnKSAmJgogICAgICAgICAgJCh0b3VjaC50YXJnZXQpLnRyaWdnZXIoJ3N3aXBlJyArIChzd2lwZURpcmVjdGlvbih0b3VjaC54MSwgdG91Y2gueDIsIHRvdWNoLnkxLCB0b3VjaC55MikpKTsKICAgICAgICB0b3VjaC54MSA9IHRvdWNoLngyID0gdG91Y2gueTEgPSB0b3VjaC55MiA9IHRvdWNoLmxhc3QgPSAwOwogICAgICB9IGVsc2UgaWYgKCdsYXN0JyBpbiB0b3VjaCkgewogICAgICAgIHRvdWNoVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXsKICAgICAgICAgIHRvdWNoVGltZW91dCA9IG51bGw7CiAgICAgICAgICAkKHRvdWNoLnRhcmdldCkudHJpZ2dlcigndGFwJykKICAgICAgICAgIHRvdWNoID0ge307CiAgICAgICAgfSwgMjUwKTsKICAgICAgfQogICAgfSkuYmluZCgndG91Y2hjYW5jZWwnLCBmdW5jdGlvbigpeyB0b3VjaCA9IHt9IH0pOwogIH0pOwoKICBbJ3N3aXBlJywgJ3N3aXBlTGVmdCcsICdzd2lwZVJpZ2h0JywgJ3N3aXBlVXAnLCAnc3dpcGVEb3duJywgJ2RvdWJsZVRhcCcsICd0YXAnLCAnbG9uZ1RhcCddLmZvckVhY2goZnVuY3Rpb24obSl7CiAgICAkLmZuW21dID0gZnVuY3Rpb24oY2FsbGJhY2speyByZXR1cm4gdGhpcy5iaW5kKG0sIGNhbGxiYWNrKSB9CiAgfSk7Cn0pKFplcHRvKTsK"},"script/couchdbplugin.js":{"content_type":"application/javascript","revpos":6,"data":"dmFyIENvdWNoRGJQbHVnaW4gPSB7CiAgIHN0YXJ0ZWQ6IGZhbHNlLAogICBnZXRTeW5jUG9pbnQ6IGZ1bmN0aW9uKHN1Y2Nlc3NDYWxsYmFjaywgZmFpbHVyZUNhbGxiYWNrKSB7CiAgICAgcmV0dXJuIFBob25lR2FwLmV4ZWMoc3VjY2Vzc0NhbGxiYWNrLAogICAgICAgICAgICAgICAgICAgICAgICAgIGZhaWx1cmVDYWxsYmFjaywKICAgICAgICAgICAgICAgICAgICAgICAgICAnQ291Y2hEYlBsdWdpbicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2dldFN5bmNQb2ludCcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgW10KICAgICAgICAgICAgICAgICAgICAgICAgICk7CiAgIH0sCiAgIHNhdmU6IGZ1bmN0aW9uKGltYWdlRG9jLCBzdWNjZXNzQ2FsbGJhY2ssIGZhaWx1cmVDYWxsYmFjaykgewogICAgICQuYWpheCh7CiAgICAgICB0eXBlOiAnUE9TVCcsCiAgICAgICB1cmw6ICcvcGhvdG9zaGFyZScsCiAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeShpbWFnZURvYyksCiAgICAgICBkYXRhVHlwZTogJ2pzb24nLAogICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJywKICAgICAgIHN1Y2Nlc3M6IHN1Y2Nlc3NDYWxsYmFjaywKICAgICAgIGVycm9yOiBmYWlsdXJlQ2FsbGJhY2sKICAgICB9KTsKICAgfQp9Cg=="}}}
